#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ThreeBytes.Logging.Exceptions.List.Frontend.Views.ExceptionList
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Script.Serialization;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using ThreeBytes.Core.Extensions.Mvc;
    using ThreeBytes.Logging.Exceptions.List.Frontend.Models;
    using ThreeBytes.Logging.Exceptions.List.Resources;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "1.2.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/ExceptionList/List.cshtml")]
    public class List : System.Web.Mvc.WebViewPage<PagedExceptionListViewModel>
    {
        public List()
        {
        }
        public override void Execute()
        {

WriteLiteral("\r\n");


            
            #line 3 "..\..\Views\ExceptionList\List.cshtml"
  
    ViewBag.Title = Resources.BrowserTitle;


            
            #line default
            #line hidden
WriteLiteral("\r\n<div id=\"latest-exceptions-container\" data-bind=\"visible: Items().length > 0\">\r" +
"\n    <div id=\"latest-exceptions-alert-message\" class=\"alert-message info\" data-b" +
"ind=\"click: copyToPagedList\">\r\n        <p><em>");


            
            #line 9 "..\..\Views\ExceptionList\List.cshtml"
          Write(Resources.There);

            
            #line default
            #line hidden
WriteLiteral("&nbsp;<span data-bind=\"text: is_are\"></span>&nbsp;<span data-bind=\"text: Items()." +
"length\"></span>&nbsp;");


            
            #line 9 "..\..\Views\ExceptionList\List.cshtml"
                                                                                                                                Write(Resources.New);

            
            #line default
            #line hidden
WriteLiteral("&nbsp;<span data-bind=\"text: plural\"></span></em></p>\r\n    </div>\r\n</div>\r\n    \r\n" +
"<div id=\"paged-exceptions-container\">\r\n    <em>");


            
            #line 14 "..\..\Views\ExceptionList\List.cshtml"
   Write(Resources.There);

            
            #line default
            #line hidden
WriteLiteral(@"&nbsp;<span data-bind=""text: is_are""></span>&nbsp;<span data-bind=""text: TotalItemCount""></span>&nbsp;<span data-bind=""text: plural""></span></em>
    <table id=""paged-exceptions-table"" class=""zebra-striped"">
        <thead>
            <tr>
                <th>
                    ");


            
            #line 19 "..\..\Views\ExceptionList\List.cshtml"
               Write(Resources.Message);

            
            #line default
            #line hidden
WriteLiteral("\r\n                </th>\r\n                <th>\r\n                    ");


            
            #line 22 "..\..\Views\ExceptionList\List.cshtml"
               Write(Resources.Source);

            
            #line default
            #line hidden
WriteLiteral(@"
                </th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody id=""paged-exceptions-tbody"" data-bind=""foreach: showCurrentPage"">
            <tr>        
                <td data-bind=""text: Message""></td>
                <td data-bind=""text: Source""></td>
                <td>
                    <button class=""btn info"" data-bind=""click: $parent.raiseDetails"">");


            
            #line 33 "..\..\Views\ExceptionList\List.cshtml"
                                                                                Write(Resources.Details);

            
            #line default
            #line hidden
WriteLiteral("</button>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </tabl" +
"e>\r\n    ");


            
            #line 38 "..\..\Views\ExceptionList\List.cshtml"
Write(Html.Paging(Model.PagedResult, "List", "Dispatch", "prev", "next", "first", "last", "pages-container"));

            
            #line default
            #line hidden
WriteLiteral("\r\n</div>\r\n\r\n");


            
            #line 41 "..\..\Views\ExceptionList\List.cshtml"
   
    using (Html.BeginScriptContext())
    {
        Html.AddScriptBlock(@"
            var exceptions_latest_list  = {};
    
            (function (index) {
        
                exceptions_latest_list = index = ko.mapping.fromJS(" + @Html.Raw(new JavaScriptSerializer().Serialize(Model.MostRecentResult)) + @");

                index.plural = ko.dependentObservable(function () {
                    return this.Items().length == 1 ? '" + @Resources.Exception + @"' : '" + @Resources.Exceptions + @"';
                }, index);

                index.is_are = ko.dependentObservable(function () {
                    return this.Items().length == 1 ? '" + @Resources.Is + @"' : '" + @Resources.Are + @"';
                }, index);
        
                index.copyToPagedList = function () {
                    jQuery(document).trigger('newExceptions', [index.Items()]);
                    jQuery.each(index.Items(), function(i, item) {
                        index.Items.remove(item);
                    });
                };

                jQuery(function() {
                    ko.applyBindings(index, jQuery('#latest-exceptions-container')[0]);
                    index.alertMessage = jQuery('#latest-exceptions-alert-message');
                });
        
                setInterval(function() {
                    jQuery.getJSON('/ExceptionList/GetNewerThan', { 'datetime': GetDotNetDate(index.RequestDateTime()) }, function (data) {
                        index.RequestDateTime(data.RequestDateTime);

                        jQuery.each(data.Items, function() {
                            index.Items.push(ko.mapping.fromJS(this));
                        });           
                    });
                }, 1000);

            } (exceptions_latest_list));
    
            var exceptions_paged_list  = {};

            (function (index) {
        
                exceptions_paged_list = index = ko.mapping.fromJS(" + @Html.Raw(new JavaScriptSerializer().Serialize(Model.PagedResult)) + @");

                index.requestedPages = ko.observableArray([]);
                index.requestedPages.push(" + @Model.PagedResult.PageNumber + @");

                index.plural = ko.dependentObservable(function () {
                    return this.TotalItemCount() == 1 ? '" + @Resources.Exception + @"' : '" + @Resources.Exceptions + @"';
                }, index);

                index.is_are = ko.dependentObservable(function () {
                    return this.TotalItemCount() == 1 ? '" + @Resources.Is + @"' : '" + @Resources.Are + @"';
                }, index);
        
                index.navigate = function(obj) {
            
                    var el = obj.target;

                    if (el.id === 'next') {
                        if (index.PageNumber() < ko.utils.unwrapObservable(index.PageCount())) {
                             index.PageNumber(index.PageNumber() + 1);
                        }
                    } 
                    else if (el.id === 'prev') {
                        if (index.PageNumber() > 1) {
                            index.PageNumber(index.PageNumber() - 1);
                        }
                    } 
                    else {
                        index.PageNumber(parseInt(el.innerText));
                    }

                    var makeRequest = true;

                    jQuery.each(index.requestedPages(), function() {
                        if (this == index.PageNumber()) {
                            makeRequest = false;
                        }
                    });
            
                    if (makeRequest) {
                        jQuery.getJSON('/ExceptionList/List', { 'page': index.PageNumber(), 'datetime': GetDotNetDate(index.OriginalRequestDateTime()) }, function(data) {
                            jQuery.each(data.Items, function() {
                                index.Items.push(ko.mapping.fromJS(this));
                            });

                            index.requestedPages.push(index.PageNumber());
                        });
                    }
                };
        
                index.showCurrentPage = ko.dependentObservable(function () {
                    var startIndex = 10 * (index.PageNumber() - 1);
                    return index.Items.slice(startIndex, startIndex + 10);
                });
        
                index.raiseDetails = function (obj) {
                    jQuery(document).trigger('exceptionDetails', [obj]);
                };

                jQuery(function() {
                    ko.applyBindings(index, jQuery('#paged-exceptions-container')[0]);
                });

                jQuery(document).bind('newExceptions', function(event, items) {
                    jQuery.each(items, function(i, item) {
                        index.Items.unshift(item);
                    });
                });

            } (exceptions_paged_list));");
    }


            
            #line default
            #line hidden
WriteLiteral(@"
<script id=""paging-page-tmpl"" type=""text/x-jquery-tmpl"">
    {{each(i) ko.utils.range(1, PageCount)}} 
        <li data-bind=""css: { active: i + 1 === PageNumber() }"">
            <a href=""#"" title=""View page ${ i + 1 }"" data-bind=""click: function (event) { navigate(event) }"">
                ${ i + 1 }
            </a>
        </li>
    {{/each}}
</script>");


        }
    }
}
#pragma warning restore 1591
