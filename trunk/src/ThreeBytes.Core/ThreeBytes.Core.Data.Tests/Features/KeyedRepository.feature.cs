// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.237
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ThreeBytes.Core.Data.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Keyed Repository")]
    public partial class KeyedRepositoryFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "KeyedRepository.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Keyed Repository", "In order to create an application I need to access data\r\nI want to be able to sel" +
                    "ect data", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert Single Record")]
        public virtual void InsertSingleRecord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert Single Record", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I have created a person keyed repository");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table1.AddRow(new string[] {
                        "Jonathan",
                        "Stowell"});
#line 7
 testRunner.And("I have saved the following person using the keyed repository", ((string)(null)), table1);
#line 10
 testRunner.When("I select all records using the keyed repository");
#line 11
 testRunner.Then("the result set should contain 1 records");
#line 12
 testRunner.And("the result set should contain Jonathan as a first name");
#line 13
 testRunner.And("the result set should contain Stowell as a surname");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Insert Multiple Records")]
        public virtual void InsertMultipleRecords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert Multiple Records", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("I have created a person keyed repository");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table2.AddRow(new string[] {
                        "Jonathan",
                        "Stowell"});
            table2.AddRow(new string[] {
                        "Carl",
                        "Saunders"});
            table2.AddRow(new string[] {
                        "Tobin",
                        "Saunders"});
            table2.AddRow(new string[] {
                        "Kamen",
                        "Staykov"});
#line 17
 testRunner.And("I have saved the following people using the keyed repository", ((string)(null)), table2);
#line 23
 testRunner.When("I select all records using the keyed repository");
#line 24
 testRunner.Then("the result set should contain 4 records");
#line 25
 testRunner.And("the result set should contain Jonathan as a first name");
#line 26
 testRunner.And("the result set should contain Stowell as a surname");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Single Record")]
        public virtual void DeleteSingleRecord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Single Record", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("I have created a person generic repository");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table3.AddRow(new string[] {
                        "Jonathan",
                        "Stowell"});
            table3.AddRow(new string[] {
                        "Carl",
                        "Saunders"});
            table3.AddRow(new string[] {
                        "Tobin",
                        "Saunders"});
            table3.AddRow(new string[] {
                        "Kamen",
                        "Staykov"});
#line 30
 testRunner.And("I have saved the following people using the generic repository", ((string)(null)), table3);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table4.AddRow(new string[] {
                        "Tobin",
                        "Saunders"});
#line 36
 testRunner.When("I delete the following person using the generic repository", ((string)(null)), table4);
#line 39
 testRunner.Then("the result set should contain 3 records");
#line 40
 testRunner.And("the result set should not contain Tobin as a first name Saunders as a surname");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete Multiple Records")]
        public virtual void DeleteMultipleRecords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Multiple Records", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have created a person keyed repository");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table5.AddRow(new string[] {
                        "Jonathan",
                        "Stowell"});
            table5.AddRow(new string[] {
                        "Carl",
                        "Saunders"});
            table5.AddRow(new string[] {
                        "Tobin",
                        "Saunders"});
            table5.AddRow(new string[] {
                        "Kamen",
                        "Staykov"});
#line 44
 testRunner.And("I have saved the following people using the keyed repository", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table6.AddRow(new string[] {
                        "Tobin",
                        "Saunders"});
            table6.AddRow(new string[] {
                        "Kamen",
                        "Staykov"});
#line 50
 testRunner.When("I delete the following people using the keyed repository", ((string)(null)), table6);
#line 54
 testRunner.Then("the result set should contain 2 records");
#line 55
 testRunner.And("the result set should not contain Tobin as a first name Saunders as a surname");
#line 56
 testRunner.And("the result set should not contain Kamen as a first name Staykov as a surname");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Select a Record by ID")]
        public virtual void SelectARecordByID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select a Record by ID", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("I have created a person keyed repository");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table7.AddRow(new string[] {
                        "Jonathan",
                        "Stowell"});
            table7.AddRow(new string[] {
                        "Carl",
                        "Saunders"});
            table7.AddRow(new string[] {
                        "Tobin",
                        "Saunders"});
            table7.AddRow(new string[] {
                        "Kamen",
                        "Staykov"});
#line 60
 testRunner.And("I have saved the following people using the keyed repository", ((string)(null)), table7);
#line 66
 testRunner.When("I select a record with 2 as its ID");
#line 67
 testRunner.Then("the single result should contain Carl as a first name");
#line 68
 testRunner.And("the single result should contain Saunders as a surname");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Select All Records")]
        public virtual void SelectAllRecords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select All Records", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("I have created a person keyed repository");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table8.AddRow(new string[] {
                        "Jonathan",
                        "Stowell"});
            table8.AddRow(new string[] {
                        "Carl",
                        "Saunders"});
            table8.AddRow(new string[] {
                        "Tobin",
                        "Saunders"});
            table8.AddRow(new string[] {
                        "Kamen",
                        "Staykov"});
#line 72
 testRunner.And("I have saved the following people using the keyed repository", ((string)(null)), table8);
#line 78
 testRunner.When("I select all records using the keyed repository");
#line 79
 testRunner.Then("the result set should contain 4 records");
#line 80
 testRunner.And("the result set should contain Jonathan as a first name");
#line 81
 testRunner.And("the result set should contain Stowell as a surname");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Select All Records Paged")]
        public virtual void SelectAllRecordsPaged()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select All Records Paged", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("I have created a person keyed repository");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table9.AddRow(new string[] {
                        "Jonathan",
                        "Stowell"});
            table9.AddRow(new string[] {
                        "Carl",
                        "Saunders"});
            table9.AddRow(new string[] {
                        "Tobin",
                        "Saunders"});
            table9.AddRow(new string[] {
                        "Kamen",
                        "Staykov"});
#line 85
 testRunner.And("I have saved the following people using the keyed repository", ((string)(null)), table9);
#line 91
 testRunner.When("I select all records paged with a page size of 2 using the keyed repository");
#line 92
 testRunner.Then("the result set should contain 2 pages");
#line 93
 testRunner.And("the result set should contain 2 paged items");
#line 94
 testRunner.And("the result set should contain 0 new items");
#line 95
 testRunner.And("the result set should contain 4 total items");
#line 96
 testRunner.And("the result set should contain the page number of 1");
#line 97
 testRunner.And("the result set should contain the page size of 2");
#line 98
 testRunner.And("the result set should not contain a previous page");
#line 99
 testRunner.And("the result set should contain a next page");
#line 100
 testRunner.And("the result set should be the first page");
#line 101
 testRunner.And("the result set should not be the last page");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Single Record")]
        public virtual void UpdateSingleRecord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Single Record", ((string[])(null)));
#line 103
this.ScenarioSetup(scenarioInfo);
#line 104
 testRunner.Given("I have created a person generic repository");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table10.AddRow(new string[] {
                        "Jonathan",
                        "Stowell"});
#line 105
 testRunner.And("I have saved the following person using the generic repository", ((string)(null)), table10);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName"});
            table11.AddRow(new string[] {
                        "Jon",
                        "Stowell"});
#line 108
 testRunner.When("I update the record Jonathan, Stowell using the generic repository to:", ((string)(null)), table11);
#line 111
 testRunner.Then("the result should be true");
#line 112
 testRunner.And("when I query for Jon, Stowell with the generic repository they will exist");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
