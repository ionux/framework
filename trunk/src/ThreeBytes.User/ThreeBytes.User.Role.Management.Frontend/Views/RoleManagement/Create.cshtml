@model ThreeBytes.User.Role.Management.Entities.RoleManagementRole

@{
    ViewBag.Title = Resources.Create;
}

<div id="user-role-create-container">
    <p>
        @Html.ActionLink(Resources.Create, "Create", "Role", null, new { @class = "btn btn-primary", data_bind = "click: raiseCreate", rel = "popover", data_content = Resources.CreatePopoverContent, data_original_title = Resources.CreatePopoverTitle })
    </p>
    <div id="user-role-create-modal" class="modal hide fade">
        <div class="modal-header">
            <a href="#" class="close" data-bind="click: raiseClose">×</a>
            <h3>@Resources.CreateRole</h3>
        </div>
        <div class="modal-body">
            <div data-bind="error: GeneralErrors"></div>
            <form id="create-role-form">
                <fieldset>
                    <div class="clearfix">
                        @Html.LabelFor(model => model.Name, Resources.Name)
                        <div class="input">
                            @Html.TextBoxFor(model => model.Name, new { @data_val = "true", @data_val_required = "'Name' should not be empty.", @data_val_length = "'Name' must be a string with a maximum length of 20.", @data_val_length_max = "20", @data_bind = "value: Name" })
                            <div data-valmsg-for="Name" data-valmsg-replace="true" data-bind="error: NameErrors"></div>
                        </div>
                    </div>
                </fieldset>
            </form>
        </div>
        <div class="modal-footer">
            <button type="submit" class="btn btn-primary" data-bind="click: save">@Resources.SaveChanges</button>&nbsp;<button type="submit" class="btn btn-danger" data-bind="click: raiseClose">@Resources.Cancel</button>
        </div>
    </div>
</div>

@{ 
  using (Html.BeginScriptContext())
  {
    Html.AddScriptBlock(@"
        var user_role_create = {};

        (function (index) {

            user_role_create = index;

            var val = ko.setupValidation([], []);
            val.createErrorCollections({Name: 0, General: 0}, index, 'create-role-form');

            index.Name = ko.observable();

            index.raiseCreate = function () {
                val.clearValidations({Name: 0, General: 0}, index);
                index.createModal.modal('show');
            };

            index.raiseClose = function () {
                index.createModal.modal('hide');
            };

            index.save = function (form) {
                if(!jQuery('#create-role-form').valid())
                    return;

                jQuery.post('" + @Url.Action("Create", "RoleManagement") + @"', { 'Name': index.Name() }, function (dataReturned) {
                    if (dataReturned.IsValid) {
                        jQuery(document).trigger('userRoleCreated');
                        index.createModal.modal('hide');
                    }
                    else {
                        val.rebindValidations({Name: 0, General: 0}, index, dataReturned.Errors);
                    }
                });
            };

            jQuery(function () {
                ko.applyBindings(index, jQuery('#user-role-create-container')[0]);
                index.createModal = jQuery('#user-role-create-modal').modal({ backdrop: true, closeOnEscape: true, modal: true, show: false });
            });

        } (user_role_create));");
  }
}