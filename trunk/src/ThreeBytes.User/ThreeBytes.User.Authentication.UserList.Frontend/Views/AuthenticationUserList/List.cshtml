@model PagedUserListUserViewModel

@{
    ViewBag.Title = Resources.BrowserTitle;
}

<div id="latest-users-container">
    <div data-bind="latestItems: latestViewModel"></div>
</div>
<div id="paged-users-container">
    <div data-bind="pagedGrid: pagedViewModel, pagedGridTemplate: 'paged-users-table-tmpl'"></div>
</div>

<script type="text/x-jquery-tmpl" id="paged-users-table-tmpl">
    <div class="widget widget-table">
    <div class="widget-header">
        <i class="icon-file"></i>
        <h3>System Users</h3>
        <div class="pull-right-menu">
            <em>@Resources.There&nbsp;<span data-bind="text: is_are"></span>&nbsp;<span data-bind="text: totalItemCount"></span>&nbsp;<span data-bind="text: plural"></span></em>
        </div>
    </div>
    <div class="widget-content">
        <table id="paged-users-table" class="table table-striped table-bordered table-condensed">
            <thead>
                <tr>
                    <th class="header yellow" data-bind="click: setOrderBy.bind($data, 'Username'), css: { headerSortDown: orderBy() == 'Username' && isAsc(), headerSortUp: orderBy() == 'Username' && !isAsc() }">
                        @Resources.Username
                    </th>
                    <th class="header green" data-bind="click: setOrderBy.bind($data, 'Email'), css: { headerSortDown: orderBy() == 'Email' && isAsc(), headerSortUp: orderBy() == 'Email' && !isAsc() }">
                        @Resources.Email
                    </th>
                    <th class="header red" data-bind="click: setOrderBy.bind($data, 'IsVerified'), css: { headerSortDown: orderBy() == 'IsVerified' && isAsc(), headerSortUp: orderBy() == 'IsVerified' && !isAsc() }">
                        @Resources.IsVerified
                    </th>
                    <th class="header orange" data-bind="click: setOrderBy.bind($data, 'IsLockedOut'), css: { headerSortDown: orderBy() == 'IsLockedOut' && isAsc(), headerSortUp: orderBy() == 'IsLockedOut' && !isAsc() }">
                        @Resources.IsLockedOut
                    </th>
                    <th class="header purple" data-bind="click: setOrderBy.bind($data, 'CreationDateTime'), css: { headerSortDown: orderBy() == 'CreationDateTime' && isAsc(), headerSortUp: orderBy() == 'CreationDateTime' && !isAsc() }">
                        @Resources.Creation
                    </th>
                    <th class="header light-blue" data-bind="click: setOrderBy.bind($data, 'LastModifiedDateTime'), css: { headerSortDown: orderBy() == 'LastModifiedDateTime' && isAsc(), headerSortUp: orderBy() == 'LastModifiedDateTime' && !isAsc() }">
                        @Resources.LastModified
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="paged-users-tbody" data-bind="foreach: items">
                <tr>        
                    <td data-bind="text: Username"></td>
                    <td data-bind="text: Email"></td>
                    <td data-bind="text: IsVerified"></td>
                    <td data-bind="text: IsLockedOut"></td>
                    <td data-bind="text: CreationDateTime"></td>
                    <td data-bind="text: LastModifiedDateTime"></td>
                    <td>
                        <div class="btn-group open">
                            <button class="btn btn-primary dropdown-toggle" data-toggle="dropdown">Select <span class="caret"></span></button>
                            <ul class="dropdown-menu">
                                <li><a href="#" data-bind="click: function(event) { $parent.additionalFunctions.raiseDetails($data); }">@Resources.Details</a></li>
                                <li><a href="#" data-bind="click: function(event) { $parent.additionalFunctions.raiseManage($data); }">@Resources.Manage</a></li>
                            </ul>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
</script>

@{ 
  using (Html.BeginScriptContext())
  {
    Html.AddScriptBlock(@"
        var user_latest_list  = {};
    
        (function (index) {

            var itemMapping = {
			    'CreationDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm'),
                'LastModifiedDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm')
		    };

            var itemViewModel = function(data) {
			    ko.mapping.fromJS(data, itemMapping, this);
		    };

            var mapping = {	
			    'Items': {
				    create: function(options) {
					    return new itemViewModel(options.data);
				    }
			    }
		    };
        
            user_latest_list = index = ko.mapping.fromJS(" + @Html.Raw(new JavaScriptSerializer().Serialize(Model.MostRecentResult)) + @", mapping);

            index.latestViewModel = new ko.latestItems.viewModel({
                controller: 'Users/List',
                action: 'GetNewerThan',
                data: index,
                singular: 'User',
                plural: 'Users',
                loadPageCallback: function(data) {
                    ko.mapping.fromJS(data, index);
                },
                divIdentifier: 'latest-users-container',
                pagingComponentIdentifier: 'paged-users',
                columns: [
                    { headerText: 'Username', rowText: 'Username' },
                    { headerText: 'Email', rowText: 'Email' },
                    { headerText: 'Creation', rowText: 'CreationDateTime' }
                ]
            });

            jQuery(function() {
                ko.applyBindings(index, jQuery('#latest-users-container')[0]);
            });     

        } (user_latest_list));
    
        var users_paged_list  = {};

        (function (index) {

            var itemMapping = {
			    'CreationDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm'),
                'LastModifiedDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm')
		    };

            var itemViewModel = function(data) {
			    ko.mapping.fromJS(data, itemMapping, this);
		    };

            var mapping = {	
			    'Items': {
				    create: function(options) {
					    return new itemViewModel(options.data);
				    }
			    }
		    };
        
            users_paged_list = index = ko.mapping.fromJS(" + @Html.Raw(new JavaScriptSerializer().Serialize(Model.PagedResult)) + @", mapping);

            index.pagedViewModel = new ko.pagedGrid.viewModel({
                controller: 'Users',
                action: 'GetPage',
                data: index,
                singular: 'User',
                plural: 'Users',
                pagingComponentIdentifier: 'paged-users',
                loadPageCallback: function(data) {
                    ko.mapping.fromJS(data, index);
                },
                columns: [
                    { headerText: 'Name', rowText: 'Name' },
                    { headerText: 'Application Name', rowText: 'ApplicationName' },
                    { headerText: 'Creation Date Time', rowText: 'CreationDateTime' },
                    { headerText: 'Last Modified Date Time', rowText: 'LastModifiedDateTime' }
                ],
                additionalFunctions: {
                    raiseManage: function (obj) {
                        jQuery(document).trigger('userManage', [obj.Id()]);
                    },
                    raiseDetails: function (obj) {
                        jQuery(document).trigger('userDetails', [obj]);
                    },
                    raiseDelete: function (obj) {
                        jQuery(document).trigger('userDelete', [obj.Id()]);
                    }
                }
            });

            jQuery(function() {
                ko.applyBindings(index, jQuery('#paged-users-container')[0]);
            });
        } (users_paged_list));");
  }
}
