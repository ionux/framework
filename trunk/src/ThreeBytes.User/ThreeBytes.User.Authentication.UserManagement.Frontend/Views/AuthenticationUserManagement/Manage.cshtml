@model UpdateUserViewModel
@{
    ViewBag.Title = Resources.BrowserTitle;
}

<div id="user-management-container">
    <div id="user-management-modal" class="modal hide fade">
        <div class="modal-header">
            <a href="#" class="close" data-bind="click: raiseClose">×</a>
            <h3>@Resources.Manage <span data-bind="text: Username"></span></h3>
        </div>
        <div class="modal-body">
            <div>
                <span data-bind="error: GeneralErrors"></span>
            </div>
            <form>
                <div class="alert-message block-message error hide">
                    <a class="close" href="#">×</a>               
                </div>
                <fieldset>
                    <div class="clearfix">
                        @Html.Label(Resources.Roles)
                        <div class="input">
                            <select data-bind="options: AvailableRoles, optionsText: 'Name', optionsValue: 'Id', value: AddRoleId, optionsCaption: 'Choose...'"></select>
                            <button class="btn btn-primary" data-bind="click: saveAssociation">@Resources.AddRole</button>
                            <div data-bind="error: RolesErrors"></div>
                        </div>
                    </div>
                    <div class="clearfix">
                        @Html.Label("User Roles")
                        <div class="input">
                            <select data-bind="options: Roles, optionsText: 'Name', optionsValue: 'Id', value: RemoveRoleId, optionsCaption: 'Choose...'"></select>
                            <button class="btn btn-danger" data-bind="click: removeAssociation">Remove Role</button>
                        </div>
                    </div>
                </fieldset>
            </form>
        </div>
        <div class="modal-footer">
            <div data-bind="currentlyViewingComponent: currentViewersViewModel"></div>
            <button class="btn btn-info" data-bind="click: raiseDetails">Details</button>
            <button class="btn btn-danger" data-bind="click: raiseClose">Close</button>
        </div>
    </div>
</div>

@{ 
  using (Html.BeginScriptContext())
  {
    Html.AddScriptBlock(@"
        var user_management = {};

        (function (index) {

            user_management = index;

            var hub = jQuery.connection.userManagementHub;

            var val = ko.setupValidation([], []);
            val.createErrorCollections({Roles: 0, General: 0}, index);

            index.Id = ko.observable();
            index.AddRoleId = ko.observable();
            index.RemoveRoleId = ko.observable();
            index.Username = ko.observable();
            index.Roles = ko.observableArray();
            index.SystemRoles = ko.mapping.fromJS(" + @Html.Raw(new JavaScriptSerializer().Serialize(Model.Roles)) + @");

            index.AvailableRoles = ko.dependentObservable(function() {
                var results = [];
                ko.utils.arrayForEach(index.SystemRoles(), function(item) {
                    var assigned = false;
                    ko.utils.arrayForEach(index.Roles(), function(role) {
                        if (item.Id() == role.Id()) {
                            assigned = true;
                        }
                    });

                    if (!assigned) {
                        results.push(item);
                    }
                });

                return results;
            }, index);

            index.saveAssociation = function () {
                jQuery.post('" + @Url.Action("CreateUserRoleAssociation", "AuthenticationUserManagement") + @"', { 'userId': index.Id(), 'roleId': index.AddRoleId() }, function (dataReturned) {
                    if (dataReturned.IsValid) {
                        index.manageModal.modal('hide');
                        jQuery.connection.hub.start(function () { hub.addedRole(index.Id(), index.AddRoleId()); });
                    }
                    else {
                        val.rebindValidations({Roles: 0, General: 0}, index, dataReturned.Errors);
                    }
                });
            };

            index.removeAssociation = function () {
                jQuery.post('" + @Url.Action("RemoveUserRoleAssociation", "AuthenticationUserManagement") + @"', { 'userId': index.Id(), 'roleId': index.RemoveRoleId() }, function (dataReturned) {
                    if (dataReturned.IsValid) {
                        index.manageModal.modal('hide');
                        jQuery.connection.hub.start(function () { hub.removedRole(index.Id(), index.AddRoleId()); });
                    }
                    else {
                        val.rebindValidations({Roles: 0, General: 0}, index, dataReturned.Errors);
                    }
                });
            };  

            index.raiseClose = function () {
                index.manageModal.modal('hide');
            };

            index.raiseDetails = function () {
                jQuery(document).trigger('userDetails', [index]);
                index.manageModal.modal('hide');
            }

            index.currentViewersViewModel = new ko.currentlyViewingComponent.viewModel({
                hub: hub,
                id: index.Id,
                modalSelector: '#user-management-modal'
            });

            hub.handleAddedRole = function (userId, roleId) {
                if (index.Id() != userId)
                    return;

                var findRole = ko.utils.arrayFirst(index.Roles(), function (item) {
                    return item.Id() == roleId;
                });

                if (findRole == null) {                    
                    var noLongerAvailableRole = ko.utils.arrayFirst(index.SystemRoles(), function (item) {
                        return item.Id() == roleId;
                    });
                    
                    if (noLongerAvailableRole != null)
                        index.Roles.push(noLongerAvailableRole);
                }
            };

            hub.handleRemovedRole = function (userId, roleId) {
                if (index.Id() != userId)
                    return;

                index.Roles.remove(function (item) {
                    return item.Id() == roleId;
                });
            };

            jQuery(document).bind('userManage', function (event, id) {

                jQuery.getJSON('" + @Url.Action("GetUserForUpdateOrDelete", "AuthenticationUserManagement") + @"', { id: id }, function (data) {

                    index.Id(data.User.Id);
                    index.Username(data.User.Username);

                    index.Roles.removeAll();

                    index.currentViewersViewModel.initialiseCurrentViewers(data.CurrentlyViewingUsers);

                    ko.utils.arrayForEach(data.User.Roles, function(item) {
                        index.Roles.push(ko.mapping.fromJS(item));
                    });

                    index.manageModal.modal('show');
                });
            });

            jQuery(function () {
                ko.applyBindings(index, jQuery('#user-management-container')[0]);
                index.manageModal = jQuery('#user-management-modal').modal({ backdrop: true, closeOnEscape: true, modal: true, show: false });
            });
        } (user_management));");
  }
}