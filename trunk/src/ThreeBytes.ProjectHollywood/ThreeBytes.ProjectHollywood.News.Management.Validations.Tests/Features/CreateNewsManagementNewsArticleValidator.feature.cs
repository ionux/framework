// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ThreeBytes.ProjectHollywood.News.Management.Validations.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CreateNewsManagementNewsArticleValidator")]
    public partial class CreateNewsManagementNewsArticleValidatorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CreateNewsManagementNewsArticleValidator.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CreateNewsManagementNewsArticleValidator", "Upon Creation of a News Management Article these rules should be upheld.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a Valid News Management Article")]
        public virtual void CreateAValidNewsManagementArticle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Valid News Management Article", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table1.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 5
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table1);
#line 8
 testRunner.When("I validate the creation");
#line 9
 testRunner.Then("the result should be valid");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a Invalid News Management Article with a empty CreatedBy property")]
        public virtual void CreateAInvalidNewsManagementArticleWithAEmptyCreatedByProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Invalid News Management Article with a empty CreatedBy property", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table2.AddRow(new string[] {
                        "",
                        "Test Title",
                        "Test Content"});
#line 12
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table2);
#line 15
 testRunner.When("I validate the creation");
#line 16
 testRunner.Then("the result should be invalid");
#line 17
 testRunner.And("there should be 2 errors");
#line 18
 testRunner.And("there should be an error for CreatedBy with message \'Created By\' should not be em" +
                    "pty.");
#line 19
 testRunner.And("there should be an error for CreatedBy with message \'Created By\' must be between " +
                    "1 and 35 characters. You entered 0 characters.");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a Invalid News Management Article with a empty Title property")]
        public virtual void CreateAInvalidNewsManagementArticleWithAEmptyTitleProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Invalid News Management Article with a empty Title property", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table3.AddRow(new string[] {
                        "Jonathan",
                        "",
                        "Test Content"});
#line 22
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table3);
#line 25
 testRunner.When("I validate the creation");
#line 26
 testRunner.Then("the result should be invalid");
#line 27
 testRunner.And("there should be 2 errors");
#line 28
 testRunner.And("there should be an error for Title with message \'Title\' should not be empty.");
#line 29
 testRunner.And("there should be an error for Title with message \'Title\' must be between 1 and 100" +
                    " characters. You entered 0 characters.");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a Invalid News Management Article with a empty Content property")]
        public virtual void CreateAInvalidNewsManagementArticleWithAEmptyContentProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Invalid News Management Article with a empty Content property", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table4.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        ""});
#line 32
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table4);
#line 35
 testRunner.When("I validate the creation");
#line 36
 testRunner.Then("the result should be invalid");
#line 37
 testRunner.And("there should be 1 error");
#line 38
 testRunner.And("there should be an error for Content with message \'Content\' should not be empty.");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a Invalid News Management Article with a CreatedBy property longer than 35" +
            " characters")]
        public virtual void CreateAInvalidNewsManagementArticleWithACreatedByPropertyLongerThan35Characters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Invalid News Management Article with a CreatedBy property longer than 35" +
                    " characters", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table5.AddRow(new string[] {
                        "ThisStringWillBeLongerThanThirtyFiveCharactersLong",
                        "Test Title",
                        "Test Content"});
#line 41
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table5);
#line 44
 testRunner.When("I validate the creation");
#line 45
 testRunner.Then("the result should be invalid");
#line 46
 testRunner.And("there should be 1 error");
#line 47
 testRunner.And("there should be an error for CreatedBy with message \'Created By\' must be between " +
                    "1 and 35 characters. You entered 50 characters.");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a Invalid News Management Article with a Title property longer than 100 ch" +
            "aracters")]
        public virtual void CreateAInvalidNewsManagementArticleWithATitlePropertyLongerThan100Characters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Invalid News Management Article with a Title property longer than 100 ch" +
                    "aracters", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table6.AddRow(new string[] {
                        "Jonathan",
                        "biqoxsuhouhhcarjygwofxyzigirlfktaepvznsiwsemqqpcbsznlqpfzjhobdyiahnxjdoqyhmxgoogi" +
                            "pmvlkzlziahvfurwdgxc",
                        "Test Content"});
#line 50
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table6);
#line 53
 testRunner.When("I validate the creation");
#line 54
 testRunner.Then("the result should be invalid");
#line 55
 testRunner.And("there should be 1 error");
#line 56
 testRunner.And("there should be an error for Title with message \'Title\' must be between 1 and 100" +
                    " characters. You entered 101 characters.");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
