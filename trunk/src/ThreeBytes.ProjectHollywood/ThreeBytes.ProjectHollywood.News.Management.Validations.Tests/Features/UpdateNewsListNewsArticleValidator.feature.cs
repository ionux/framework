// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ThreeBytes.ProjectHollywood.News.Management.Validations.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UpdateNewsListNewsArticleValidator")]
    public partial class UpdateNewsListNewsArticleValidatorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UpdateNewsListNewsArticleValidator.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UpdateNewsListNewsArticleValidator", "Upon Updating of a News Management Article these rules should be upheld.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attempt to Update a Invalid News Management Article with a empty CreatedBy proper" +
            "ty")]
        public virtual void AttemptToUpdateAInvalidNewsManagementArticleWithAEmptyCreatedByProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to Update a Invalid News Management Article with a empty CreatedBy proper" +
                    "ty", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table1.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 5
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table1);
#line 8
 testRunner.When("I change the Creator to nothing");
#line 9
 testRunner.And("I validate the reauthoring");
#line 10
 testRunner.Then("the result should be invalid");
#line 11
 testRunner.And("there should be 1 error");
#line 12
 testRunner.And("there should be an error for CreatedBy with message It is not possible to update " +
                    "the Creator of a Article");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rename a Valid News Management Article")]
        public virtual void RenameAValidNewsManagementArticle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rename a Valid News Management Article", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table2.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 15
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table2);
#line 18
 testRunner.When("I rename the Title to New Title");
#line 19
 testRunner.And("I validate the renaming");
#line 20
 testRunner.Then("the result should be valid");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table3.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 22
testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table3);
#line 25
 testRunner.When("I rename the Title to biqoxsuhouhhcarjygwofxyzigirlfktaepvznsiwsemqqpcbsznlqpfzjh" +
                    "obdyiahnxjdoqyhmxgoogipmvlkzlziahvfurwdgxc");
#line 26
 testRunner.And("I validate the renaming");
#line 27
 testRunner.Then("the result should be invalid");
#line 28
 testRunner.And("there should be 1 error");
#line 29
 testRunner.And("there should be an error for Title with message \'Title\' must be between 1 and 100" +
                    " characters. You entered 101 characters.");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rename a News Management Article with a empty Title property")]
        public virtual void RenameANewsManagementArticleWithAEmptyTitleProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rename a News Management Article with a empty Title property", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table4.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 32
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table4);
#line 35
 testRunner.When("I rename the Title to nothing");
#line 36
 testRunner.And("I validate the renaming");
#line 37
 testRunner.Then("the result should be invalid");
#line 38
 testRunner.And("there should be 2 errors");
#line 39
 testRunner.And("there should be an error for Title with message \'Title\' should not be empty.");
#line 40
 testRunner.And("there should be an error for Title with message \'Title\' must be between 1 and 100" +
                    " characters. You entered 0 characters.");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update the Content of a Valid News Management Article")]
        public virtual void UpdateTheContentOfAValidNewsManagementArticle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update the Content of a Valid News Management Article", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table5.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 43
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table5);
#line 46
 testRunner.When("I change the Content to New Content");
#line 47
 testRunner.And("I validate the content update");
#line 48
 testRunner.Then("the result should be valid");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a Invalid News Management Article with a empty Content property")]
        public virtual void CreateAInvalidNewsManagementArticleWithAEmptyContentProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Invalid News Management Article with a empty Content property", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table6.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 51
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table6);
#line 54
 testRunner.When("I change the Content to nothing");
#line 55
 testRunner.And("I validate the content update");
#line 56
 testRunner.Then("the result should be invalid");
#line 57
 testRunner.And("there should be 1 error");
#line 58
 testRunner.And("there should be an error for Content with message \'Content\' should not be empty.");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
