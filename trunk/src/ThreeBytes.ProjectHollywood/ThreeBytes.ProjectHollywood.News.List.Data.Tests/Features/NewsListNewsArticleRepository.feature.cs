// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ThreeBytes.ProjectHollywood.News.List.Data.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NewsListNewsArticleRepository")]
    public partial class NewsListNewsArticleRepositoryFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NewsListNewsArticleRepository.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NewsListNewsArticleRepository", "Data Access tests for NewsManagementNewsArticleRepository", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News List Article in a transaction")]
        public virtual void CreateANewsListArticleInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News List Article in a transaction", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table1.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 5
 testRunner.Given("I have a news list article with the properties", ((string)(null)), table1);
#line 8
 testRunner.When("I attempt to create the article in a transaction");
#line 9
 testRunner.Then("the repository result will be true");
#line 10
 testRunner.And("the article repository count should be 1");
#line 11
 testRunner.And("the Creator will be Jonathan");
#line 12
 testRunner.And("the Title will be Test Title");
#line 13
 testRunner.And("the Content will be Test Content");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News List Article not in a transaction followed by Flushing Changes")]
        public virtual void CreateANewsListArticleNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News List Article not in a transaction followed by Flushing Changes", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table2.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 16
 testRunner.Given("I have a news list article with the properties", ((string)(null)), table2);
#line 19
 testRunner.When("I attempt to create the article in a transaction");
#line 20
 testRunner.And("I flush the changes");
#line 21
 testRunner.Then("the repository result will be true");
#line 22
 testRunner.And("the article repository count should be 1");
#line 23
 testRunner.And("the Creator will be Jonathan");
#line 24
 testRunner.And("the Title will be Test Title");
#line 25
 testRunner.And("the Content will be Test Content");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News List Article not in a transaction")]
        public virtual void CreateANewsListArticleNotInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News List Article not in a transaction", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table3.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 28
 testRunner.Given("I have a news list article with the properties", ((string)(null)), table3);
#line 31
 testRunner.When("I attempt to create the article not in a transaction");
#line 32
 testRunner.Then("the article repository count should be 0");
#line 33
 testRunner.And("the repository result will be true");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News List Article in a transaction with a null CreatedBy Property")]
        public virtual void CreateANewsListArticleInATransactionWithANullCreatedByProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News List Article in a transaction with a null CreatedBy Property", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table4.AddRow(new string[] {
                        "null",
                        "Test Title",
                        "Test Content"});
#line 36
 testRunner.Given("I have a news list article with the properties", ((string)(null)), table4);
#line 39
 testRunner.When("I attempt to create the article in a transaction");
#line 40
 testRunner.Then("the article repository count should be 0");
#line 41
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News List Article in a transaction with a null Title Property")]
        public virtual void CreateANewsListArticleInATransactionWithANullTitleProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News List Article in a transaction with a null Title Property", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table5.AddRow(new string[] {
                        "Jonathan",
                        "null",
                        "Test Content"});
#line 44
 testRunner.Given("I have a news list article with the properties", ((string)(null)), table5);
#line 47
 testRunner.When("I attempt to create the article in a transaction");
#line 48
 testRunner.Then("the article repository count should be 0");
#line 49
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News List Article in a transaction with a null Content Property")]
        public virtual void CreateANewsListArticleInATransactionWithANullContentProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News List Article in a transaction with a null Content Property", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table6.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "null"});
#line 52
 testRunner.Given("I have a news list article with the properties", ((string)(null)), table6);
#line 55
 testRunner.When("I attempt to create the article in a transaction");
#line 56
 testRunner.Then("the article repository count should be 0");
#line 57
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a News List Article in a transaction")]
        public virtual void UpdateANewsListArticleInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a News List Article in a transaction", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table7.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 60
 testRunner.Given("I have a saved news list article with the properties", ((string)(null)), table7);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table8.AddRow(new string[] {
                        "Tobin",
                        "New Title",
                        "New Content"});
#line 63
 testRunner.When("I update the news list article to the values below in a transaction", ((string)(null)), table8);
#line 66
 testRunner.Then("the Creator will be Tobin");
#line 67
 testRunner.And("the Title will be New Title");
#line 68
 testRunner.And("the Content will be New Content");
#line 69
 testRunner.And("the repository result will be true");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a News List Article not in a transaction followed by Flushing Changes")]
        public virtual void UpdateANewsListArticleNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a News List Article not in a transaction followed by Flushing Changes", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table9.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 72
 testRunner.Given("I have a saved news list article with the properties", ((string)(null)), table9);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table10.AddRow(new string[] {
                        "Tobin",
                        "New Title",
                        "New Content"});
#line 75
 testRunner.When("I update the news list article to the values below not in a transaction", ((string)(null)), table10);
#line 78
 testRunner.And("I flush the changes");
#line 79
 testRunner.Then("the Creator will be Tobin");
#line 80
 testRunner.And("the Title will be New Title");
#line 81
 testRunner.And("the Content will be New Content");
#line 82
 testRunner.And("the repository result will be true");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a Invalid News List Article in a transaction")]
        public virtual void UpdateAInvalidNewsListArticleInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a Invalid News List Article in a transaction", ((string[])(null)));
#line 84
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table11.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 85
 testRunner.Given("I have a saved news list article with the properties", ((string)(null)), table11);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table12.AddRow(new string[] {
                        "null",
                        "New Title",
                        "New Content"});
#line 88
 testRunner.When("I update the news list article to the values below in a transaction", ((string)(null)), table12);
#line 91
 testRunner.Then("the Creator will be Jonathan");
#line 92
 testRunner.And("the Title will be Test Title");
#line 93
 testRunner.And("the Content will be Test Content");
#line 94
 testRunner.And("the repository result will be true");
#line 95
 testRunner.And("the unit of work result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a Invalid News List Article not in a transaction followed by Flushing Chan" +
            "ges")]
        public virtual void UpdateAInvalidNewsListArticleNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a Invalid News List Article not in a transaction followed by Flushing Chan" +
                    "ges", ((string[])(null)));
#line 97
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table13.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 98
 testRunner.Given("I have a saved news list article with the properties", ((string)(null)), table13);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table14.AddRow(new string[] {
                        "null",
                        "New Title",
                        "New Content"});
#line 101
 testRunner.When("I update the news list article to the values below not in a transaction", ((string)(null)), table14);
#line 104
 testRunner.And("I flush the changes");
#line 105
 testRunner.Then("the Creator will be Jonathan");
#line 106
 testRunner.And("the Title will be Test Title");
#line 107
 testRunner.And("the Content will be Test Content");
#line 108
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a null News List Article in a transaction")]
        public virtual void DeleteANullNewsListArticleInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a null News List Article in a transaction", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line 111
 testRunner.Given("I have a null news list article");
#line 112
 testRunner.When("I attempt to delete the article in a transaction");
#line 113
 testRunner.Then("the article repository count should be 0");
#line 114
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a News List Article in a transaction")]
        public virtual void DeleteANewsListArticleInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a News List Article in a transaction", ((string[])(null)));
#line 116
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table15.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 117
 testRunner.Given("I have a saved news list article with the properties", ((string)(null)), table15);
#line 120
 testRunner.When("I attempt to delete the article in a transaction");
#line 121
 testRunner.Then("the article repository count should be 0");
#line 122
 testRunner.And("the repository result will be true");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
