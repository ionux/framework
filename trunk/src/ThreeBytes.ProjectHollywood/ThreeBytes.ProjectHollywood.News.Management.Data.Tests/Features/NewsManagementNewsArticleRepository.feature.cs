// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ThreeBytes.ProjectHollywood.News.Management.Data.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NewsManagementNewsArticleRepository")]
    public partial class NewsManagementNewsArticleRepositoryFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NewsManagementNewsArticleRepository.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NewsManagementNewsArticleRepository", "Data Access tests for NewsManagementNewsArticleRepository", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News Management Article in a transaction")]
        public virtual void CreateANewsManagementArticleInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News Management Article in a transaction", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table1.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 5
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table1);
#line 8
 testRunner.When("I attempt to create the article in a transaction");
#line 9
 testRunner.Then("the repository result will be true");
#line 10
 testRunner.And("the article repository count should be 1");
#line 11
 testRunner.And("the Creator will be Jonathan");
#line 12
 testRunner.And("the Title will be Test Title");
#line 13
 testRunner.And("the Content will be Test Content");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several News Management Articles in a transaction")]
        public virtual void CreateSeveralNewsManagementArticlesInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several News Management Articles in a transaction", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table2.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table2.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table2.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table2.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table2.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table2.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table2.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table2.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table2.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table2.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table2.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table2.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table2.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table2.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table2.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table2.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table2.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table2.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table2.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table2.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 16
 testRunner.Given("I have several news management articles with the properties", ((string)(null)), table2);
#line 38
 testRunner.When("I attempt to create the articles in a transaction");
#line 39
 testRunner.Then("the repository result will be true");
#line 40
 testRunner.And("the article repository count should be 20");
#line 41
 testRunner.And("there should be an article created by Jonathan with the title Test Title 1 and th" +
                    "e content Test Content 1");
#line 42
 testRunner.And("there should be an article created by Tobin with the title Test Title 2 and the c" +
                    "ontent Test Content 2");
#line 43
 testRunner.And("there should be an article created by Carl with the title Test Title 3 and the co" +
                    "ntent Test Content 3");
#line 44
 testRunner.And("there should be an article created by Sara with the title Test Title 4 and the co" +
                    "ntent Test Content 4");
#line 45
 testRunner.And("there should be an article created by Dan with the title Test Title 5 and the con" +
                    "tent Test Content 5");
#line 46
 testRunner.And("there should be an article created by Jon with the title Test Title 6 and the con" +
                    "tent Test Content 6");
#line 47
 testRunner.And("there should be an article created by Emma with the title Test Title 7 and the co" +
                    "ntent Test Content 7");
#line 48
 testRunner.And("there should be an article created by Sorcha with the title Test Title 8 and the " +
                    "content Test Content 8");
#line 49
 testRunner.And("there should be an article created by Joel with the title Test Title 9 and the co" +
                    "ntent Test Content 9");
#line 50
 testRunner.And("there should be an article created by Dom with the title Test Title 10 and the co" +
                    "ntent Test Content 10");
#line 51
 testRunner.And("there should be an article created by Laura with the title Test Title 11 and the " +
                    "content Test Content 11");
#line 52
 testRunner.And("there should be an article created by Sarah with the title Test Title 12 and the " +
                    "content Test Content 12");
#line 53
 testRunner.And("there should be an article created by Wayne with the title Test Title 13 and the " +
                    "content Test Content 13");
#line 54
 testRunner.And("there should be an article created by Eric with the title Test Title 14 and the c" +
                    "ontent Test Content 14");
#line 55
 testRunner.And("there should be an article created by Gary with the title Test Title 15 and the c" +
                    "ontent Test Content 15");
#line 56
 testRunner.And("there should be an article created by Peter with the title Test Title 16 and the " +
                    "content Test Content 16");
#line 57
 testRunner.And("there should be an article created by Julie with the title Test Title 17 and the " +
                    "content Test Content 17");
#line 58
 testRunner.And("there should be an article created by Mollie with the title Test Title 18 and the" +
                    " content Test Content 18");
#line 59
 testRunner.And("there should be an article created by George with the title Test Title 19 and the" +
                    " content Test Content 19");
#line 60
 testRunner.And("there should be an article created by Matthew with the title Test Title 20 and th" +
                    "e content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News Management Article not in a transaction followed by Flushing Change" +
            "s")]
        public virtual void CreateANewsManagementArticleNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News Management Article not in a transaction followed by Flushing Change" +
                    "s", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table3.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 63
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table3);
#line 66
 testRunner.When("I attempt to create the article not in a transaction");
#line 67
 testRunner.And("I flush the changes");
#line 68
 testRunner.Then("the repository result will be true");
#line 69
 testRunner.And("the article repository count should be 1");
#line 70
 testRunner.And("the Creator will be Jonathan");
#line 71
 testRunner.And("the Title will be Test Title");
#line 72
 testRunner.And("the Content will be Test Content");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several News Management Article not in a transaction followed by Flushing " +
            "Changes")]
        public virtual void CreateSeveralNewsManagementArticleNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several News Management Article not in a transaction followed by Flushing " +
                    "Changes", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table4.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table4.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table4.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table4.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table4.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table4.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table4.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table4.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table4.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table4.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table4.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table4.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table4.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table4.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table4.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table4.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table4.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table4.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table4.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table4.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 75
 testRunner.Given("I have several news management articles with the properties", ((string)(null)), table4);
#line 97
 testRunner.When("I attempt to create the articles not in a transaction");
#line 98
 testRunner.And("I flush the changes");
#line 99
 testRunner.Then("the repository result will be true");
#line 100
 testRunner.And("the article repository count should be 20");
#line 101
 testRunner.And("there should be an article created by Jonathan with the title Test Title 1 and th" +
                    "e content Test Content 1");
#line 102
 testRunner.And("there should be an article created by Tobin with the title Test Title 2 and the c" +
                    "ontent Test Content 2");
#line 103
 testRunner.And("there should be an article created by Carl with the title Test Title 3 and the co" +
                    "ntent Test Content 3");
#line 104
 testRunner.And("there should be an article created by Sara with the title Test Title 4 and the co" +
                    "ntent Test Content 4");
#line 105
 testRunner.And("there should be an article created by Dan with the title Test Title 5 and the con" +
                    "tent Test Content 5");
#line 106
 testRunner.And("there should be an article created by Jon with the title Test Title 6 and the con" +
                    "tent Test Content 6");
#line 107
 testRunner.And("there should be an article created by Emma with the title Test Title 7 and the co" +
                    "ntent Test Content 7");
#line 108
 testRunner.And("there should be an article created by Sorcha with the title Test Title 8 and the " +
                    "content Test Content 8");
#line 109
 testRunner.And("there should be an article created by Joel with the title Test Title 9 and the co" +
                    "ntent Test Content 9");
#line 110
 testRunner.And("there should be an article created by Dom with the title Test Title 10 and the co" +
                    "ntent Test Content 10");
#line 111
 testRunner.And("there should be an article created by Laura with the title Test Title 11 and the " +
                    "content Test Content 11");
#line 112
 testRunner.And("there should be an article created by Sarah with the title Test Title 12 and the " +
                    "content Test Content 12");
#line 113
 testRunner.And("there should be an article created by Wayne with the title Test Title 13 and the " +
                    "content Test Content 13");
#line 114
 testRunner.And("there should be an article created by Eric with the title Test Title 14 and the c" +
                    "ontent Test Content 14");
#line 115
 testRunner.And("there should be an article created by Gary with the title Test Title 15 and the c" +
                    "ontent Test Content 15");
#line 116
 testRunner.And("there should be an article created by Peter with the title Test Title 16 and the " +
                    "content Test Content 16");
#line 117
 testRunner.And("there should be an article created by Julie with the title Test Title 17 and the " +
                    "content Test Content 17");
#line 118
 testRunner.And("there should be an article created by Mollie with the title Test Title 18 and the" +
                    " content Test Content 18");
#line 119
 testRunner.And("there should be an article created by George with the title Test Title 19 and the" +
                    " content Test Content 19");
#line 120
 testRunner.And("there should be an article created by Matthew with the title Test Title 20 and th" +
                    "e content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News Management Article not in a transaction")]
        public virtual void CreateANewsManagementArticleNotInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News Management Article not in a transaction", ((string[])(null)));
#line 122
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table5.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 123
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table5);
#line 126
 testRunner.When("I attempt to create the article not in a transaction");
#line 127
 testRunner.Then("the article repository count should be 0");
#line 128
 testRunner.And("the repository result will be true");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several News Management Articles not in a transaction")]
        public virtual void CreateSeveralNewsManagementArticlesNotInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several News Management Articles not in a transaction", ((string[])(null)));
#line 130
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table6.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table6.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table6.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table6.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table6.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table6.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table6.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table6.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table6.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table6.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table6.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table6.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table6.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table6.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table6.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table6.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table6.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table6.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table6.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table6.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 131
 testRunner.Given("I have several news management articles with the properties", ((string)(null)), table6);
#line 153
 testRunner.When("I attempt to create the articles not in a transaction");
#line 154
 testRunner.Then("the repository result will be true");
#line 155
 testRunner.And("the article repository count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News Management Article in a transaction with a null CreatedBy Property")]
        public virtual void CreateANewsManagementArticleInATransactionWithANullCreatedByProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News Management Article in a transaction with a null CreatedBy Property", ((string[])(null)));
#line 157
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table7.AddRow(new string[] {
                        "null",
                        "Test Title",
                        "Test Content"});
#line 158
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table7);
#line 161
 testRunner.When("I attempt to create the article in a transaction");
#line 162
 testRunner.Then("the article repository count should be 0");
#line 163
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several News Management Articles in a transaction with some having a null " +
            "CreatedBy Property")]
        public virtual void CreateSeveralNewsManagementArticlesInATransactionWithSomeHavingANullCreatedByProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several News Management Articles in a transaction with some having a null " +
                    "CreatedBy Property", ((string[])(null)));
#line 165
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table8.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table8.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table8.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table8.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table8.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table8.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table8.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table8.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table8.AddRow(new string[] {
                        "null",
                        "Test Title 9",
                        "Test Content 9"});
            table8.AddRow(new string[] {
                        "null",
                        "Test Title 10",
                        "Test Content 10"});
            table8.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table8.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table8.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table8.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table8.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table8.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table8.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table8.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table8.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table8.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 166
 testRunner.Given("I have several news management articles with the properties", ((string)(null)), table8);
#line 188
 testRunner.When("I attempt to create the articles in a transaction");
#line 189
 testRunner.Then("the repository result will be false");
#line 190
 testRunner.And("the article repository count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News Management Article in a transaction with a null Title Property")]
        public virtual void CreateANewsManagementArticleInATransactionWithANullTitleProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News Management Article in a transaction with a null Title Property", ((string[])(null)));
#line 192
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table9.AddRow(new string[] {
                        "Jonathan",
                        "null",
                        "Test Content"});
#line 193
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table9);
#line 196
 testRunner.When("I attempt to create the article in a transaction");
#line 197
 testRunner.Then("the article repository count should be 0");
#line 198
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several News Management Articles in a transaction with some having a null " +
            "Title Property")]
        public virtual void CreateSeveralNewsManagementArticlesInATransactionWithSomeHavingANullTitleProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several News Management Articles in a transaction with some having a null " +
                    "Title Property", ((string[])(null)));
#line 200
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table10.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table10.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table10.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table10.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table10.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table10.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table10.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table10.AddRow(new string[] {
                        "Sorcha",
                        "null",
                        "Test Content 8"});
            table10.AddRow(new string[] {
                        "Joel",
                        "null",
                        "Test Content 9"});
            table10.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table10.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table10.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table10.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table10.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table10.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table10.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table10.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table10.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table10.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table10.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 201
 testRunner.Given("I have several news management articles with the properties", ((string)(null)), table10);
#line 223
 testRunner.When("I attempt to create the articles in a transaction");
#line 224
 testRunner.Then("the repository result will be false");
#line 225
 testRunner.And("the article repository count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News Management Article in a transaction with a null Content Property")]
        public virtual void CreateANewsManagementArticleInATransactionWithANullContentProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News Management Article in a transaction with a null Content Property", ((string[])(null)));
#line 227
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table11.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "null"});
#line 228
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table11);
#line 231
 testRunner.When("I attempt to create the article in a transaction");
#line 232
 testRunner.Then("the article repository count should be 0");
#line 233
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several News Management Articles in a transaction with some having a null " +
            "Content Property")]
        public virtual void CreateSeveralNewsManagementArticlesInATransactionWithSomeHavingANullContentProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several News Management Articles in a transaction with some having a null " +
                    "Content Property", ((string[])(null)));
#line 235
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table12.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table12.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table12.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table12.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table12.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table12.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table12.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table12.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table12.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "null"});
            table12.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "null"});
            table12.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table12.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table12.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table12.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table12.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table12.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table12.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table12.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table12.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table12.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 236
 testRunner.Given("I have several news management articles with the properties", ((string)(null)), table12);
#line 258
 testRunner.When("I attempt to create the articles in a transaction");
#line 259
 testRunner.Then("the repository result will be false");
#line 260
 testRunner.And("the article repository count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a News Management Article in a transaction")]
        public virtual void UpdateANewsManagementArticleInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a News Management Article in a transaction", ((string[])(null)));
#line 262
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table13.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 263
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table13);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table14.AddRow(new string[] {
                        "Tobin",
                        "New Title",
                        "New Content"});
#line 266
 testRunner.When("I update the news management article to the values below in a transaction", ((string)(null)), table14);
#line 269
 testRunner.Then("the Creator will be Tobin");
#line 270
 testRunner.And("the Title will be New Title");
#line 271
 testRunner.And("the Content will be New Content");
#line 272
 testRunner.And("the repository result will be true");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update several News Management Articles in a transaction")]
        public virtual void UpdateSeveralNewsManagementArticlesInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update several News Management Articles in a transaction", ((string[])(null)));
#line 274
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table15.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table15.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table15.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table15.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table15.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table15.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table15.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table15.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table15.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table15.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table15.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table15.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table15.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table15.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table15.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table15.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table15.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table15.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table15.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table15.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 275
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table15);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table16.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 10",
                        "Test Content 10"});
            table16.AddRow(new string[] {
                        "Tobin",
                        "Test Title 20",
                        "Test Content 20"});
            table16.AddRow(new string[] {
                        "Carl",
                        "Test Title 30",
                        "Test Content 30"});
            table16.AddRow(new string[] {
                        "Sara",
                        "Test Title 40",
                        "Test Content 40"});
            table16.AddRow(new string[] {
                        "Dan",
                        "Test Title 50",
                        "Test Content 50"});
            table16.AddRow(new string[] {
                        "Jon",
                        "Test Title 60",
                        "Test Content 60"});
            table16.AddRow(new string[] {
                        "Emma",
                        "Test Title 70",
                        "Test Content 70"});
            table16.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 80",
                        "Test Content 80"});
            table16.AddRow(new string[] {
                        "Joel",
                        "Test Title 90",
                        "Test Content 90"});
            table16.AddRow(new string[] {
                        "Dom",
                        "Test Title 100",
                        "Test Content 100"});
            table16.AddRow(new string[] {
                        "Laura",
                        "Test Title 110",
                        "Test Content 110"});
            table16.AddRow(new string[] {
                        "Sarah",
                        "Test Title 120",
                        "Test Content 120"});
            table16.AddRow(new string[] {
                        "Wayne",
                        "Test Title 130",
                        "Test Content 130"});
            table16.AddRow(new string[] {
                        "Eric",
                        "Test Title 140",
                        "Test Content 140"});
            table16.AddRow(new string[] {
                        "Gary",
                        "Test Title 150",
                        "Test Content 150"});
            table16.AddRow(new string[] {
                        "Peter",
                        "Test Title 160",
                        "Test Content 160"});
            table16.AddRow(new string[] {
                        "Julie",
                        "Test Title 170",
                        "Test Content 170"});
            table16.AddRow(new string[] {
                        "Mollie",
                        "Test Title 180",
                        "Test Content 180"});
            table16.AddRow(new string[] {
                        "George",
                        "Test Title 190",
                        "Test Content 190"});
            table16.AddRow(new string[] {
                        "Matthew",
                        "Test Title 200",
                        "Test Content 200"});
#line 297
 testRunner.When("I update the news management articles to the values below in a transaction using " +
                    "Created By as the identifier", ((string)(null)), table16);
#line 319
 testRunner.Then("the repository result will be true");
#line 320
 testRunner.And("the article repository count should be 20");
#line 321
 testRunner.And("there should be an article created by Jonathan with the title Test Title 10 and t" +
                    "he content Test Content 10");
#line 322
 testRunner.And("there should be an article created by Tobin with the title Test Title 20 and the " +
                    "content Test Content 20");
#line 323
 testRunner.And("there should be an article created by Carl with the title Test Title 30 and the c" +
                    "ontent Test Content 30");
#line 324
 testRunner.And("there should be an article created by Sara with the title Test Title 40 and the c" +
                    "ontent Test Content 40");
#line 325
 testRunner.And("there should be an article created by Dan with the title Test Title 50 and the co" +
                    "ntent Test Content 50");
#line 326
 testRunner.And("there should be an article created by Jon with the title Test Title 60 and the co" +
                    "ntent Test Content 60");
#line 327
 testRunner.And("there should be an article created by Emma with the title Test Title 70 and the c" +
                    "ontent Test Content 70");
#line 328
 testRunner.And("there should be an article created by Sorcha with the title Test Title 80 and the" +
                    " content Test Content 80");
#line 329
 testRunner.And("there should be an article created by Joel with the title Test Title 90 and the c" +
                    "ontent Test Content 90");
#line 330
 testRunner.And("there should be an article created by Dom with the title Test Title 100 and the c" +
                    "ontent Test Content 100");
#line 331
 testRunner.And("there should be an article created by Laura with the title Test Title 110 and the" +
                    " content Test Content 110");
#line 332
 testRunner.And("there should be an article created by Sarah with the title Test Title 120 and the" +
                    " content Test Content 120");
#line 333
 testRunner.And("there should be an article created by Wayne with the title Test Title 130 and the" +
                    " content Test Content 130");
#line 334
 testRunner.And("there should be an article created by Eric with the title Test Title 140 and the " +
                    "content Test Content 140");
#line 335
 testRunner.And("there should be an article created by Gary with the title Test Title 150 and the " +
                    "content Test Content 150");
#line 336
 testRunner.And("there should be an article created by Peter with the title Test Title 160 and the" +
                    " content Test Content 160");
#line 337
 testRunner.And("there should be an article created by Julie with the title Test Title 170 and the" +
                    " content Test Content 170");
#line 338
 testRunner.And("there should be an article created by Mollie with the title Test Title 180 and th" +
                    "e content Test Content 180");
#line 339
 testRunner.And("there should be an article created by George with the title Test Title 190 and th" +
                    "e content Test Content 190");
#line 340
 testRunner.And("there should be an article created by Matthew with the title Test Title 200 and t" +
                    "he content Test Content 200");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a News Management Article not in a transaction followed by Flushing Change" +
            "s")]
        public virtual void UpdateANewsManagementArticleNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a News Management Article not in a transaction followed by Flushing Change" +
                    "s", ((string[])(null)));
#line 342
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table17.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 343
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table17);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table18.AddRow(new string[] {
                        "Tobin",
                        "New Title",
                        "New Content"});
#line 346
 testRunner.When("I update the news management article to the values below not in a transaction", ((string)(null)), table18);
#line 349
 testRunner.And("I flush the changes");
#line 350
 testRunner.Then("the Creator will be Tobin");
#line 351
 testRunner.And("the Title will be New Title");
#line 352
 testRunner.And("the Content will be New Content");
#line 353
 testRunner.And("the repository result will be true");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update several News Management Articles not in a transaction followed by Flushing" +
            " Changes")]
        public virtual void UpdateSeveralNewsManagementArticlesNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update several News Management Articles not in a transaction followed by Flushing" +
                    " Changes", ((string[])(null)));
#line 355
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table19.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table19.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table19.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table19.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table19.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table19.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table19.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table19.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table19.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table19.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table19.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table19.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table19.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table19.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table19.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table19.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table19.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table19.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table19.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table19.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 356
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table19);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table20.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 10",
                        "Test Content 10"});
            table20.AddRow(new string[] {
                        "Tobin",
                        "Test Title 20",
                        "Test Content 20"});
            table20.AddRow(new string[] {
                        "Carl",
                        "Test Title 30",
                        "Test Content 30"});
            table20.AddRow(new string[] {
                        "Sara",
                        "Test Title 40",
                        "Test Content 40"});
            table20.AddRow(new string[] {
                        "Dan",
                        "Test Title 50",
                        "Test Content 50"});
            table20.AddRow(new string[] {
                        "Jon",
                        "Test Title 60",
                        "Test Content 60"});
            table20.AddRow(new string[] {
                        "Emma",
                        "Test Title 70",
                        "Test Content 70"});
            table20.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 80",
                        "Test Content 80"});
            table20.AddRow(new string[] {
                        "Joel",
                        "Test Title 90",
                        "Test Content 90"});
            table20.AddRow(new string[] {
                        "Dom",
                        "Test Title 100",
                        "Test Content 100"});
            table20.AddRow(new string[] {
                        "Laura",
                        "Test Title 110",
                        "Test Content 110"});
            table20.AddRow(new string[] {
                        "Sarah",
                        "Test Title 120",
                        "Test Content 120"});
            table20.AddRow(new string[] {
                        "Wayne",
                        "Test Title 130",
                        "Test Content 130"});
            table20.AddRow(new string[] {
                        "Eric",
                        "Test Title 140",
                        "Test Content 140"});
            table20.AddRow(new string[] {
                        "Gary",
                        "Test Title 150",
                        "Test Content 150"});
            table20.AddRow(new string[] {
                        "Peter",
                        "Test Title 160",
                        "Test Content 160"});
            table20.AddRow(new string[] {
                        "Julie",
                        "Test Title 170",
                        "Test Content 170"});
            table20.AddRow(new string[] {
                        "Mollie",
                        "Test Title 180",
                        "Test Content 180"});
            table20.AddRow(new string[] {
                        "George",
                        "Test Title 190",
                        "Test Content 190"});
            table20.AddRow(new string[] {
                        "Matthew",
                        "Test Title 200",
                        "Test Content 200"});
#line 378
 testRunner.When("I update the news management articles to the values below not in a transaction us" +
                    "ing Created By as the identifier", ((string)(null)), table20);
#line 400
 testRunner.And("I flush the changes");
#line 401
 testRunner.Then("the repository result will be true");
#line 402
 testRunner.And("the article repository count should be 20");
#line 403
 testRunner.And("there should be an article created by Jonathan with the title Test Title 10 and t" +
                    "he content Test Content 10");
#line 404
 testRunner.And("there should be an article created by Tobin with the title Test Title 20 and the " +
                    "content Test Content 20");
#line 405
 testRunner.And("there should be an article created by Carl with the title Test Title 30 and the c" +
                    "ontent Test Content 30");
#line 406
 testRunner.And("there should be an article created by Sara with the title Test Title 40 and the c" +
                    "ontent Test Content 40");
#line 407
 testRunner.And("there should be an article created by Dan with the title Test Title 50 and the co" +
                    "ntent Test Content 50");
#line 408
 testRunner.And("there should be an article created by Jon with the title Test Title 60 and the co" +
                    "ntent Test Content 60");
#line 409
 testRunner.And("there should be an article created by Emma with the title Test Title 70 and the c" +
                    "ontent Test Content 70");
#line 410
 testRunner.And("there should be an article created by Sorcha with the title Test Title 80 and the" +
                    " content Test Content 80");
#line 411
 testRunner.And("there should be an article created by Joel with the title Test Title 90 and the c" +
                    "ontent Test Content 90");
#line 412
 testRunner.And("there should be an article created by Dom with the title Test Title 100 and the c" +
                    "ontent Test Content 100");
#line 413
 testRunner.And("there should be an article created by Laura with the title Test Title 110 and the" +
                    " content Test Content 110");
#line 414
 testRunner.And("there should be an article created by Sarah with the title Test Title 120 and the" +
                    " content Test Content 120");
#line 415
 testRunner.And("there should be an article created by Wayne with the title Test Title 130 and the" +
                    " content Test Content 130");
#line 416
 testRunner.And("there should be an article created by Eric with the title Test Title 140 and the " +
                    "content Test Content 140");
#line 417
 testRunner.And("there should be an article created by Gary with the title Test Title 150 and the " +
                    "content Test Content 150");
#line 418
 testRunner.And("there should be an article created by Peter with the title Test Title 160 and the" +
                    " content Test Content 160");
#line 419
 testRunner.And("there should be an article created by Julie with the title Test Title 170 and the" +
                    " content Test Content 170");
#line 420
 testRunner.And("there should be an article created by Mollie with the title Test Title 180 and th" +
                    "e content Test Content 180");
#line 421
 testRunner.And("there should be an article created by George with the title Test Title 190 and th" +
                    "e content Test Content 190");
#line 422
 testRunner.And("there should be an article created by Matthew with the title Test Title 200 and t" +
                    "he content Test Content 200");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a Invalid News Management Article in a transaction")]
        public virtual void UpdateAInvalidNewsManagementArticleInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a Invalid News Management Article in a transaction", ((string[])(null)));
#line 424
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table21.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 425
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table21);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table22.AddRow(new string[] {
                        "null",
                        "New Title",
                        "New Content"});
#line 428
 testRunner.When("I update the news management article to the values below in a transaction", ((string)(null)), table22);
#line 431
 testRunner.Then("the Creator will be Jonathan");
#line 432
 testRunner.And("the Title will be Test Title");
#line 433
 testRunner.And("the Content will be Test Content");
#line 434
 testRunner.And("the repository result will be true");
#line 435
 testRunner.And("the unit of work result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update several Invalid News Management Articles in a transaction")]
        public virtual void UpdateSeveralInvalidNewsManagementArticlesInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update several Invalid News Management Articles in a transaction", ((string[])(null)));
#line 437
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table23.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table23.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table23.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table23.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table23.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table23.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table23.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table23.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table23.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table23.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table23.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table23.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table23.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table23.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table23.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table23.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table23.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table23.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table23.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table23.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 438
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table23);
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table24.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 10",
                        "Test Content 10"});
            table24.AddRow(new string[] {
                        "Tobin",
                        "Test Title 20",
                        "Test Content 20"});
            table24.AddRow(new string[] {
                        "Carl",
                        "Test Title 30",
                        "Test Content 30"});
            table24.AddRow(new string[] {
                        "Sara",
                        "Test Title 40",
                        "Test Content 40"});
            table24.AddRow(new string[] {
                        "Dan",
                        "Test Title 50",
                        "Test Content 50"});
            table24.AddRow(new string[] {
                        "Jon",
                        "Test Title 60",
                        "Test Content 60"});
            table24.AddRow(new string[] {
                        "Emma",
                        "Test Title 70",
                        "Test Content 70"});
            table24.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 80",
                        "Test Content 80"});
            table24.AddRow(new string[] {
                        "Joel",
                        "null",
                        "Test Content 90"});
            table24.AddRow(new string[] {
                        "Dom",
                        "null",
                        "Test Content 100"});
            table24.AddRow(new string[] {
                        "Laura",
                        "Test Title 110",
                        "Test Content 110"});
            table24.AddRow(new string[] {
                        "Sarah",
                        "Test Title 120",
                        "Test Content 120"});
            table24.AddRow(new string[] {
                        "Wayne",
                        "Test Title 130",
                        "Test Content 130"});
            table24.AddRow(new string[] {
                        "Eric",
                        "Test Title 140",
                        "Test Content 140"});
            table24.AddRow(new string[] {
                        "Gary",
                        "Test Title 150",
                        "Test Content 150"});
            table24.AddRow(new string[] {
                        "Peter",
                        "Test Title 160",
                        "Test Content 160"});
            table24.AddRow(new string[] {
                        "Julie",
                        "Test Title 170",
                        "Test Content 170"});
            table24.AddRow(new string[] {
                        "Mollie",
                        "Test Title 180",
                        "Test Content 180"});
            table24.AddRow(new string[] {
                        "George",
                        "Test Title 190",
                        "Test Content 190"});
            table24.AddRow(new string[] {
                        "Matthew",
                        "Test Title 200",
                        "Test Content 200"});
#line 460
 testRunner.When("I update the news management articles to the values below in a transaction using " +
                    "Created By as the identifier", ((string)(null)), table24);
#line 482
 testRunner.Then("the repository result will be true");
#line 483
 testRunner.And("the unit of work result will be false");
#line 484
 testRunner.And("the article repository count should be 20");
#line 485
 testRunner.And("there should be an article created by Jonathan with the title Test Title 1 and th" +
                    "e content Test Content 1");
#line 486
 testRunner.And("there should be an article created by Tobin with the title Test Title 2 and the c" +
                    "ontent Test Content 2");
#line 487
 testRunner.And("there should be an article created by Carl with the title Test Title 3 and the co" +
                    "ntent Test Content 3");
#line 488
 testRunner.And("there should be an article created by Sara with the title Test Title 4 and the co" +
                    "ntent Test Content 4");
#line 489
 testRunner.And("there should be an article created by Dan with the title Test Title 5 and the con" +
                    "tent Test Content 5");
#line 490
 testRunner.And("there should be an article created by Jon with the title Test Title 6 and the con" +
                    "tent Test Content 6");
#line 491
 testRunner.And("there should be an article created by Emma with the title Test Title 7 and the co" +
                    "ntent Test Content 7");
#line 492
 testRunner.And("there should be an article created by Sorcha with the title Test Title 8 and the " +
                    "content Test Content 8");
#line 493
 testRunner.And("there should be an article created by Joel with the title Test Title 9 and the co" +
                    "ntent Test Content 9");
#line 494
 testRunner.And("there should be an article created by Dom with the title Test Title 10 and the co" +
                    "ntent Test Content 10");
#line 495
 testRunner.And("there should be an article created by Laura with the title Test Title 11 and the " +
                    "content Test Content 11");
#line 496
 testRunner.And("there should be an article created by Sarah with the title Test Title 12 and the " +
                    "content Test Content 12");
#line 497
 testRunner.And("there should be an article created by Wayne with the title Test Title 13 and the " +
                    "content Test Content 13");
#line 498
 testRunner.And("there should be an article created by Eric with the title Test Title 14 and the c" +
                    "ontent Test Content 14");
#line 499
 testRunner.And("there should be an article created by Gary with the title Test Title 15 and the c" +
                    "ontent Test Content 15");
#line 500
 testRunner.And("there should be an article created by Peter with the title Test Title 16 and the " +
                    "content Test Content 16");
#line 501
 testRunner.And("there should be an article created by Julie with the title Test Title 17 and the " +
                    "content Test Content 17");
#line 502
 testRunner.And("there should be an article created by Mollie with the title Test Title 18 and the" +
                    " content Test Content 18");
#line 503
 testRunner.And("there should be an article created by George with the title Test Title 19 and the" +
                    " content Test Content 19");
#line 504
 testRunner.And("there should be an article created by Matthew with the title Test Title 20 and th" +
                    "e content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a Invalid News Management Article not in a transaction followed by Flushin" +
            "g Changes")]
        public virtual void UpdateAInvalidNewsManagementArticleNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a Invalid News Management Article not in a transaction followed by Flushin" +
                    "g Changes", ((string[])(null)));
#line 506
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table25.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 507
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table25);
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table26.AddRow(new string[] {
                        "null",
                        "New Title",
                        "New Content"});
#line 510
 testRunner.When("I update the news management article to the values below not in a transaction", ((string)(null)), table26);
#line 513
 testRunner.And("I flush the changes");
#line 514
 testRunner.Then("the Creator will be Jonathan");
#line 515
 testRunner.And("the Title will be Test Title");
#line 516
 testRunner.And("the Content will be Test Content");
#line 517
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update several Invalid News Management Articles not in a transaction followed by " +
            "Flushing Changes")]
        public virtual void UpdateSeveralInvalidNewsManagementArticlesNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update several Invalid News Management Articles not in a transaction followed by " +
                    "Flushing Changes", ((string[])(null)));
#line 519
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table27.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table27.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table27.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table27.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table27.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table27.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table27.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table27.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table27.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table27.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table27.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table27.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table27.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table27.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table27.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table27.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table27.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table27.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table27.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table27.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 520
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table27);
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table28.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 10",
                        "Test Content 10"});
            table28.AddRow(new string[] {
                        "Tobin",
                        "Test Title 20",
                        "Test Content 20"});
            table28.AddRow(new string[] {
                        "Carl",
                        "Test Title 30",
                        "Test Content 30"});
            table28.AddRow(new string[] {
                        "Sara",
                        "Test Title 40",
                        "Test Content 40"});
            table28.AddRow(new string[] {
                        "Dan",
                        "Test Title 50",
                        "Test Content 50"});
            table28.AddRow(new string[] {
                        "Jon",
                        "Test Title 60",
                        "Test Content 60"});
            table28.AddRow(new string[] {
                        "Emma",
                        "Test Title 70",
                        "Test Content 70"});
            table28.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 80",
                        "Test Content 80"});
            table28.AddRow(new string[] {
                        "Joel",
                        "null",
                        "Test Content 90"});
            table28.AddRow(new string[] {
                        "Dom",
                        "null",
                        "Test Content 100"});
            table28.AddRow(new string[] {
                        "Laura",
                        "Test Title 110",
                        "Test Content 110"});
            table28.AddRow(new string[] {
                        "Sarah",
                        "Test Title 120",
                        "Test Content 120"});
            table28.AddRow(new string[] {
                        "Wayne",
                        "Test Title 130",
                        "Test Content 130"});
            table28.AddRow(new string[] {
                        "Eric",
                        "Test Title 140",
                        "Test Content 140"});
            table28.AddRow(new string[] {
                        "Gary",
                        "Test Title 150",
                        "Test Content 150"});
            table28.AddRow(new string[] {
                        "Peter",
                        "Test Title 160",
                        "Test Content 160"});
            table28.AddRow(new string[] {
                        "Julie",
                        "Test Title 170",
                        "Test Content 170"});
            table28.AddRow(new string[] {
                        "Mollie",
                        "Test Title 180",
                        "Test Content 180"});
            table28.AddRow(new string[] {
                        "George",
                        "Test Title 190",
                        "Test Content 190"});
            table28.AddRow(new string[] {
                        "Matthew",
                        "Test Title 200",
                        "Test Content 200"});
#line 542
 testRunner.When("I update the news management articles to the values below not in a transaction us" +
                    "ing Created By as the identifier", ((string)(null)), table28);
#line 564
 testRunner.And("I flush the changes");
#line 565
 testRunner.Then("the repository result will be false");
#line 566
 testRunner.And("the article repository count should be 20");
#line 567
 testRunner.And("there should be an article created by Jonathan with the title Test Title 1 and th" +
                    "e content Test Content 1");
#line 568
 testRunner.And("there should be an article created by Tobin with the title Test Title 2 and the c" +
                    "ontent Test Content 2");
#line 569
 testRunner.And("there should be an article created by Carl with the title Test Title 3 and the co" +
                    "ntent Test Content 3");
#line 570
 testRunner.And("there should be an article created by Sara with the title Test Title 4 and the co" +
                    "ntent Test Content 4");
#line 571
 testRunner.And("there should be an article created by Dan with the title Test Title 5 and the con" +
                    "tent Test Content 5");
#line 572
 testRunner.And("there should be an article created by Jon with the title Test Title 6 and the con" +
                    "tent Test Content 6");
#line 573
 testRunner.And("there should be an article created by Emma with the title Test Title 7 and the co" +
                    "ntent Test Content 7");
#line 574
 testRunner.And("there should be an article created by Sorcha with the title Test Title 8 and the " +
                    "content Test Content 8");
#line 575
 testRunner.And("there should be an article created by Joel with the title Test Title 9 and the co" +
                    "ntent Test Content 9");
#line 576
 testRunner.And("there should be an article created by Dom with the title Test Title 10 and the co" +
                    "ntent Test Content 10");
#line 577
 testRunner.And("there should be an article created by Laura with the title Test Title 11 and the " +
                    "content Test Content 11");
#line 578
 testRunner.And("there should be an article created by Sarah with the title Test Title 12 and the " +
                    "content Test Content 12");
#line 579
 testRunner.And("there should be an article created by Wayne with the title Test Title 13 and the " +
                    "content Test Content 13");
#line 580
 testRunner.And("there should be an article created by Eric with the title Test Title 14 and the c" +
                    "ontent Test Content 14");
#line 581
 testRunner.And("there should be an article created by Gary with the title Test Title 15 and the c" +
                    "ontent Test Content 15");
#line 582
 testRunner.And("there should be an article created by Peter with the title Test Title 16 and the " +
                    "content Test Content 16");
#line 583
 testRunner.And("there should be an article created by Julie with the title Test Title 17 and the " +
                    "content Test Content 17");
#line 584
 testRunner.And("there should be an article created by Mollie with the title Test Title 18 and the" +
                    " content Test Content 18");
#line 585
 testRunner.And("there should be an article created by George with the title Test Title 19 and the" +
                    " content Test Content 19");
#line 586
 testRunner.And("there should be an article created by Matthew with the title Test Title 20 and th" +
                    "e content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a null News Management Article in a transaction")]
        public virtual void DeleteANullNewsManagementArticleInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a null News Management Article in a transaction", ((string[])(null)));
#line 588
this.ScenarioSetup(scenarioInfo);
#line 589
 testRunner.Given("I have a null news management article");
#line 590
 testRunner.When("I attempt to delete the article in a transaction");
#line 591
 testRunner.Then("the article repository count should be 0");
#line 592
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete several null News Management Articles in a transaction")]
        public virtual void DeleteSeveralNullNewsManagementArticlesInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete several null News Management Articles in a transaction", ((string[])(null)));
#line 594
this.ScenarioSetup(scenarioInfo);
#line 595
 testRunner.Given("I have several null news management articles");
#line 596
 testRunner.When("I attempt to delete the articles in a transaction");
#line 597
 testRunner.Then("the article repository count should be 0");
#line 598
 testRunner.And("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a News Management Article in a transaction")]
        public virtual void DeleteANewsManagementArticleInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a News Management Article in a transaction", ((string[])(null)));
#line 600
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table29.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 601
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table29);
#line 604
 testRunner.When("I attempt to delete the article in a transaction");
#line 605
 testRunner.Then("the article repository count should be 0");
#line 606
 testRunner.And("the repository result will be true");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete several News Management Articles in a transaction")]
        public virtual void DeleteSeveralNewsManagementArticlesInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete several News Management Articles in a transaction", ((string[])(null)));
#line 608
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table30.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table30.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table30.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table30.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table30.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table30.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table30.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table30.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table30.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table30.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table30.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table30.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table30.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table30.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table30.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table30.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table30.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table30.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table30.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table30.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 609
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table30);
#line 631
 testRunner.When("I attempt to delete the articles in a transaction");
#line 632
 testRunner.Then("the repository result will be true");
#line 633
 testRunner.And("the article repository count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a News Management Article not in a transaction followed by Flushing Change" +
            "s")]
        public virtual void DeleteANewsManagementArticleNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a News Management Article not in a transaction followed by Flushing Change" +
                    "s", ((string[])(null)));
#line 635
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table31.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 636
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table31);
#line 639
 testRunner.When("I attempt to delete the article not in a transaction");
#line 640
 testRunner.And("I flush the changes");
#line 641
 testRunner.Then("the repository result will be true");
#line 642
 testRunner.And("the article repository count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete several News Management Articles not in a transaction followed by Flushing" +
            " Changes")]
        public virtual void DeleteSeveralNewsManagementArticlesNotInATransactionFollowedByFlushingChanges()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete several News Management Articles not in a transaction followed by Flushing" +
                    " Changes", ((string[])(null)));
#line 644
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table32.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table32.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table32.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table32.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table32.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table32.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table32.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table32.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table32.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table32.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table32.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table32.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table32.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table32.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table32.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table32.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table32.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table32.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table32.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table32.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 645
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table32);
#line 667
 testRunner.When("I attempt to delete the articles not in a transaction");
#line 668
 testRunner.And("I flush the changes");
#line 669
 testRunner.Then("the repository result will be true");
#line 670
 testRunner.And("the article repository count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a News Management Article not in a transaction")]
        public virtual void DeleteANewsManagementArticleNotInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a News Management Article not in a transaction", ((string[])(null)));
#line 672
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table33.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 673
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table33);
#line 676
 testRunner.When("I attempt to delete the article not in a transaction");
#line 677
 testRunner.Then("the repository result will be true");
#line 678
 testRunner.And("the article repository count should be 1");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete several News Management Articles not in a transaction")]
        public virtual void DeleteSeveralNewsManagementArticlesNotInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete several News Management Articles not in a transaction", ((string[])(null)));
#line 680
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table34.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table34.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table34.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table34.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table34.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table34.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table34.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table34.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table34.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table34.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table34.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table34.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table34.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table34.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table34.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table34.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table34.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table34.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table34.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table34.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 681
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table34);
#line 703
 testRunner.When("I attempt to delete the articles not in a transaction");
#line 704
 testRunner.Then("the repository result will be true");
#line 705
 testRunner.And("the article repository count should be 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid Query Is News Article Created By")]
        public virtual void ValidQueryIsNewsArticleCreatedBy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid Query Is News Article Created By", ((string[])(null)));
#line 707
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table35.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 708
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table35);
#line 711
 testRunner.When("I query whether the news article was created by Jonathan");
#line 712
 testRunner.Then("the repository result will be true");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid Query Is News Article Created By")]
        public virtual void InvalidQueryIsNewsArticleCreatedBy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid Query Is News Article Created By", ((string[])(null)));
#line 714
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table36.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 715
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table36);
#line 718
 testRunner.When("I query whether the news article was created by Tobin");
#line 719
 testRunner.Then("the repository result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get All News Management Articles When There is only one Item")]
        public virtual void GetAllNewsManagementArticlesWhenThereIsOnlyOneItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All News Management Articles When There is only one Item", ((string[])(null)));
#line 721
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table37.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
#line 722
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table37);
#line 725
 testRunner.When("I get all articles");
#line 726
 testRunner.Then("the article list result should contain 1 items");
#line 727
 testRunner.And("there should be an article in the list created by Jonathan with the title Test Ti" +
                    "tle 1 and the content Test Content 1");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get All News Management Articles When No Articles Exist")]
        public virtual void GetAllNewsManagementArticlesWhenNoArticlesExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All News Management Articles When No Articles Exist", ((string[])(null)));
#line 729
this.ScenarioSetup(scenarioInfo);
#line 730
 testRunner.Given("I have no saved news management articles");
#line 731
 testRunner.When("I get all articles");
#line 732
 testRunner.Then("the article list result should contain 0 items");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get All News Management Articles")]
        public virtual void GetAllNewsManagementArticles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All News Management Articles", ((string[])(null)));
#line 734
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table38.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table38.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table38.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table38.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table38.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table38.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table38.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table38.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table38.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table38.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table38.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table38.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table38.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table38.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table38.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table38.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table38.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table38.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table38.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table38.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 735
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table38);
#line 757
 testRunner.When("I get all articles");
#line 758
 testRunner.Then("the article list result should contain 20 items");
#line 759
 testRunner.And("there should be an article in the list created by Jonathan with the title Test Ti" +
                    "tle 1 and the content Test Content 1");
#line 760
 testRunner.And("there should be an article in the list created by Tobin with the title Test Title" +
                    " 2 and the content Test Content 2");
#line 761
 testRunner.And("there should be an article in the list created by Carl with the title Test Title " +
                    "3 and the content Test Content 3");
#line 762
 testRunner.And("there should be an article in the list created by Sara with the title Test Title " +
                    "4 and the content Test Content 4");
#line 763
 testRunner.And("there should be an article in the list created by Dan with the title Test Title 5" +
                    " and the content Test Content 5");
#line 764
 testRunner.And("there should be an article in the list created by Jon with the title Test Title 6" +
                    " and the content Test Content 6");
#line 765
 testRunner.And("there should be an article in the list created by Emma with the title Test Title " +
                    "7 and the content Test Content 7");
#line 766
 testRunner.And("there should be an article in the list created by Sorcha with the title Test Titl" +
                    "e 8 and the content Test Content 8");
#line 767
 testRunner.And("there should be an article in the list created by Joel with the title Test Title " +
                    "9 and the content Test Content 9");
#line 768
 testRunner.And("there should be an article in the list created by Dom with the title Test Title 1" +
                    "0 and the content Test Content 10");
#line 769
 testRunner.And("there should be an article in the list created by Laura with the title Test Title" +
                    " 11 and the content Test Content 11");
#line 770
 testRunner.And("there should be an article in the list created by Sarah with the title Test Title" +
                    " 12 and the content Test Content 12");
#line 771
 testRunner.And("there should be an article in the list created by Wayne with the title Test Title" +
                    " 13 and the content Test Content 13");
#line 772
 testRunner.And("there should be an article in the list created by Eric with the title Test Title " +
                    "14 and the content Test Content 14");
#line 773
 testRunner.And("there should be an article in the list created by Gary with the title Test Title " +
                    "15 and the content Test Content 15");
#line 774
 testRunner.And("there should be an article in the list created by Peter with the title Test Title" +
                    " 16 and the content Test Content 16");
#line 775
 testRunner.And("there should be an article in the list created by Julie with the title Test Title" +
                    " 17 and the content Test Content 17");
#line 776
 testRunner.And("there should be an article in the list created by Mollie with the title Test Titl" +
                    "e 18 and the content Test Content 18");
#line 777
 testRunner.And("there should be an article in the list created by George with the title Test Titl" +
                    "e 19 and the content Test Content 19");
#line 778
 testRunner.And("there should be an article in the list created by Matthew with the title Test Tit" +
                    "le 20 and the content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get All News Management Articles Paged When No Articles Exist")]
        public virtual void GetAllNewsManagementArticlesPagedWhenNoArticlesExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All News Management Articles Paged When No Articles Exist", ((string[])(null)));
#line 780
this.ScenarioSetup(scenarioInfo);
#line 781
 testRunner.Given("I have no saved news management articles");
#line 782
 testRunner.When("I get all articles paged requesting the first page with a page size of 10");
#line 783
 testRunner.Then("the paged article result should contain 0 items");
#line 784
 testRunner.And("the paged article result page count should be 1");
#line 785
 testRunner.And("the paged article result total item count should be 0");
#line 786
 testRunner.And("the paged article result page number should be 1");
#line 787
 testRunner.And("the paged article result page size should be 10");
#line 788
 testRunner.And("the paged article result has previous page should be false");
#line 789
 testRunner.And("the paged article result has next page should be false");
#line 790
 testRunner.And("the paged article result is first page should be true");
#line 791
 testRunner.And("the paged article result is last page should be true");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get All News Management Articles Paged When There is only one Item")]
        public virtual void GetAllNewsManagementArticlesPagedWhenThereIsOnlyOneItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All News Management Articles Paged When There is only one Item", ((string[])(null)));
#line 793
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table39.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
#line 794
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table39);
#line 797
 testRunner.When("I get all articles paged requesting the first page with a page size of 10");
#line 798
 testRunner.Then("the paged article result should contain 1 items");
#line 799
 testRunner.And("the paged article result page count should be 1");
#line 800
 testRunner.And("the paged article result total item count should be 1");
#line 801
 testRunner.And("the paged article result page number should be 1");
#line 802
 testRunner.And("the paged article result page size should be 10");
#line 803
 testRunner.And("the paged article result has previous page should be false");
#line 804
 testRunner.And("the paged article result has next page should be false");
#line 805
 testRunner.And("the paged article result is first page should be true");
#line 806
 testRunner.And("the paged article result is last page should be true");
#line 807
 testRunner.And("there should be an article in the paged list created by Jonathan with the title T" +
                    "est Title 1 and the content Test Content 1");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get All News Management Articles Paged First Page with Page Size of 10")]
        public virtual void GetAllNewsManagementArticlesPagedFirstPageWithPageSizeOf10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All News Management Articles Paged First Page with Page Size of 10", ((string[])(null)));
#line 809
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table40.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table40.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table40.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table40.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table40.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table40.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table40.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table40.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table40.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table40.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table40.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table40.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table40.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table40.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table40.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table40.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table40.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table40.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table40.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table40.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 810
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table40);
#line 832
 testRunner.When("I get all articles paged requesting the first page with a page size of 10");
#line 833
 testRunner.Then("the paged article result should contain 10 items");
#line 834
 testRunner.And("the paged article result page count should be 2");
#line 835
 testRunner.And("the paged article result total item count should be 20");
#line 836
 testRunner.And("the paged article result page number should be 1");
#line 837
 testRunner.And("the paged article result page size should be 10");
#line 838
 testRunner.And("the paged article result has previous page should be false");
#line 839
 testRunner.And("the paged article result has next page should be true");
#line 840
 testRunner.And("the paged article result is first page should be true");
#line 841
 testRunner.And("the paged article result is last page should be false");
#line 842
 testRunner.And("there should be an article in the paged list created by Jonathan with the title T" +
                    "est Title 1 and the content Test Content 1");
#line 843
 testRunner.And("there should be an article in the paged list created by Tobin with the title Test" +
                    " Title 2 and the content Test Content 2");
#line 844
 testRunner.And("there should be an article in the paged list created by Carl with the title Test " +
                    "Title 3 and the content Test Content 3");
#line 845
 testRunner.And("there should be an article in the paged list created by Sara with the title Test " +
                    "Title 4 and the content Test Content 4");
#line 846
 testRunner.And("there should be an article in the paged list created by Dan with the title Test T" +
                    "itle 5 and the content Test Content 5");
#line 847
 testRunner.And("there should be an article in the paged list created by Jon with the title Test T" +
                    "itle 6 and the content Test Content 6");
#line 848
 testRunner.And("there should be an article in the paged list created by Emma with the title Test " +
                    "Title 7 and the content Test Content 7");
#line 849
 testRunner.And("there should be an article in the paged list created by Sorcha with the title Tes" +
                    "t Title 8 and the content Test Content 8");
#line 850
 testRunner.And("there should be an article in the paged list created by Joel with the title Test " +
                    "Title 9 and the content Test Content 9");
#line 851
 testRunner.And("there should be an article in the paged list created by Dom with the title Test T" +
                    "itle 10 and the content Test Content 10");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get All News Management Articles Paged Second Page with Page Size of 10")]
        public virtual void GetAllNewsManagementArticlesPagedSecondPageWithPageSizeOf10()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All News Management Articles Paged Second Page with Page Size of 10", ((string[])(null)));
#line 853
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table41.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table41.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table41.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table41.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table41.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table41.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table41.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table41.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table41.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table41.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table41.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table41.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table41.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table41.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table41.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table41.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table41.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table41.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table41.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table41.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 854
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table41);
#line 876
 testRunner.When("I get all articles paged requesting the second page with a page size of 10");
#line 877
 testRunner.Then("the paged article result should contain 10 items");
#line 878
 testRunner.And("the paged article result page count should be 2");
#line 879
 testRunner.And("the paged article result total item count should be 20");
#line 880
 testRunner.And("the paged article result page number should be 2");
#line 881
 testRunner.And("the paged article result page size should be 10");
#line 882
 testRunner.And("the paged article result has previous page should be true");
#line 883
 testRunner.And("the paged article result has next page should be false");
#line 884
 testRunner.And("the paged article result is first page should be false");
#line 885
 testRunner.And("the paged article result is last page should be true");
#line 886
 testRunner.And("there should be an article created by Laura with the title Test Title 11 and the " +
                    "content Test Content 11");
#line 887
 testRunner.And("there should be an article created by Sarah with the title Test Title 12 and the " +
                    "content Test Content 12");
#line 888
 testRunner.And("there should be an article created by Wayne with the title Test Title 13 and the " +
                    "content Test Content 13");
#line 889
 testRunner.And("there should be an article created by Eric with the title Test Title 14 and the c" +
                    "ontent Test Content 14");
#line 890
 testRunner.And("there should be an article created by Gary with the title Test Title 15 and the c" +
                    "ontent Test Content 15");
#line 891
 testRunner.And("there should be an article created by Peter with the title Test Title 16 and the " +
                    "content Test Content 16");
#line 892
 testRunner.And("there should be an article created by Julie with the title Test Title 17 and the " +
                    "content Test Content 17");
#line 893
 testRunner.And("there should be an article created by Mollie with the title Test Title 18 and the" +
                    " content Test Content 18");
#line 894
 testRunner.And("there should be an article created by George with the title Test Title 19 and the" +
                    " content Test Content 19");
#line 895
 testRunner.And("there should be an article created by Matthew with the title Test Title 20 and th" +
                    "e content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get All News Management Articles Paged First Page with Page Size of 15")]
        public virtual void GetAllNewsManagementArticlesPagedFirstPageWithPageSizeOf15()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All News Management Articles Paged First Page with Page Size of 15", ((string[])(null)));
#line 897
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table42.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table42.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table42.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table42.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table42.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table42.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table42.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table42.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table42.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table42.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table42.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table42.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table42.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table42.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table42.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table42.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table42.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table42.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table42.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table42.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 898
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table42);
#line 920
 testRunner.When("I get all articles paged requesting the first page with a page size of 15");
#line 921
 testRunner.Then("the paged article result should contain 15 items");
#line 922
 testRunner.And("the paged article result page count should be 2");
#line 923
 testRunner.And("the paged article result total item count should be 20");
#line 924
 testRunner.And("the paged article result page number should be 1");
#line 925
 testRunner.And("the paged article result page size should be 15");
#line 926
 testRunner.And("the paged article result has previous page should be false");
#line 927
 testRunner.And("the paged article result has next page should be true");
#line 928
 testRunner.And("the paged article result is first page should be true");
#line 929
 testRunner.And("the paged article result is last page should be false");
#line 930
 testRunner.And("there should be an article in the paged list created by Jonathan with the title T" +
                    "est Title 1 and the content Test Content 1");
#line 931
 testRunner.And("there should be an article in the paged list created by Tobin with the title Test" +
                    " Title 2 and the content Test Content 2");
#line 932
 testRunner.And("there should be an article in the paged list created by Carl with the title Test " +
                    "Title 3 and the content Test Content 3");
#line 933
 testRunner.And("there should be an article in the paged list created by Sara with the title Test " +
                    "Title 4 and the content Test Content 4");
#line 934
 testRunner.And("there should be an article in the paged list created by Dan with the title Test T" +
                    "itle 5 and the content Test Content 5");
#line 935
 testRunner.And("there should be an article in the paged list created by Jon with the title Test T" +
                    "itle 6 and the content Test Content 6");
#line 936
 testRunner.And("there should be an article in the paged list created by Emma with the title Test " +
                    "Title 7 and the content Test Content 7");
#line 937
 testRunner.And("there should be an article in the paged list created by Sorcha with the title Tes" +
                    "t Title 8 and the content Test Content 8");
#line 938
 testRunner.And("there should be an article in the paged list created by Joel with the title Test " +
                    "Title 9 and the content Test Content 9");
#line 939
 testRunner.And("there should be an article in the paged list created by Dom with the title Test T" +
                    "itle 10 and the content Test Content 10");
#line 940
 testRunner.And("there should be an article created by Laura with the title Test Title 11 and the " +
                    "content Test Content 11");
#line 941
 testRunner.And("there should be an article created by Sarah with the title Test Title 12 and the " +
                    "content Test Content 12");
#line 942
 testRunner.And("there should be an article created by Wayne with the title Test Title 13 and the " +
                    "content Test Content 13");
#line 943
 testRunner.And("there should be an article created by Eric with the title Test Title 14 and the c" +
                    "ontent Test Content 14");
#line 944
 testRunner.And("there should be an article created by Gary with the title Test Title 15 and the c" +
                    "ontent Test Content 15");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get All News Management Articles Paged Second Page with Page Size of 15")]
        public virtual void GetAllNewsManagementArticlesPagedSecondPageWithPageSizeOf15()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get All News Management Articles Paged Second Page with Page Size of 15", ((string[])(null)));
#line 946
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table43.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table43.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table43.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table43.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table43.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table43.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table43.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table43.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table43.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table43.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table43.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table43.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table43.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table43.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table43.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table43.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table43.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table43.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table43.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table43.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 947
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table43);
#line 969
 testRunner.When("I get all articles paged requesting the second page with a page size of 15");
#line 970
 testRunner.Then("the paged article result should contain 5 items");
#line 971
 testRunner.And("the paged article result page count should be 2");
#line 972
 testRunner.And("the paged article result total item count should be 20");
#line 973
 testRunner.And("the paged article result page number should be 2");
#line 974
 testRunner.And("the paged article result page size should be 15");
#line 975
 testRunner.And("the paged article result has previous page should be true");
#line 976
 testRunner.And("the paged article result has next page should be false");
#line 977
 testRunner.And("the paged article result is first page should be false");
#line 978
 testRunner.And("the paged article result is last page should be true");
#line 979
 testRunner.And("there should be an article created by Gary with the title Test Title 15 and the c" +
                    "ontent Test Content 15");
#line 980
 testRunner.And("there should be an article created by Peter with the title Test Title 16 and the " +
                    "content Test Content 16");
#line 981
 testRunner.And("there should be an article created by Julie with the title Test Title 17 and the " +
                    "content Test Content 17");
#line 982
 testRunner.And("there should be an article created by Mollie with the title Test Title 18 and the" +
                    " content Test Content 18");
#line 983
 testRunner.And("there should be an article created by George with the title Test Title 19 and the" +
                    " content Test Content 19");
#line 984
 testRunner.And("there should be an article created by Matthew with the title Test Title 20 and th" +
                    "e content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Latest News Management Articles Full Take")]
        public virtual void GetLatestNewsManagementArticlesFullTake()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Latest News Management Articles Full Take", ((string[])(null)));
#line 986
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table44.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table44.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table44.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table44.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table44.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table44.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table44.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table44.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table44.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table44.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
#line 987
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table44);
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table45.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table45.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table45.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table45.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table45.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table45.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table45.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table45.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table45.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table45.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 999
 testRunner.And("then I save more news management articles with the properties", ((string)(null)), table45);
#line 1011
 testRunner.When("I get the 10 most recent articles");
#line 1012
 testRunner.Then("the article list result should contain 10 items");
#line 1013
 testRunner.And("there should be an article in the list created by Laura with the title Test Title" +
                    " 11 and the content Test Content 11");
#line 1014
 testRunner.And("there should be an article in the list created by Sarah with the title Test Title" +
                    " 12 and the content Test Content 12");
#line 1015
 testRunner.And("there should be an article in the list created by Wayne with the title Test Title" +
                    " 13 and the content Test Content 13");
#line 1016
 testRunner.And("there should be an article in the list created by Eric with the title Test Title " +
                    "14 and the content Test Content 14");
#line 1017
 testRunner.And("there should be an article in the list created by Gary with the title Test Title " +
                    "15 and the content Test Content 15");
#line 1018
 testRunner.And("there should be an article in the list created by Peter with the title Test Title" +
                    " 16 and the content Test Content 16");
#line 1019
 testRunner.And("there should be an article in the list created by Julie with the title Test Title" +
                    " 17 and the content Test Content 17");
#line 1020
 testRunner.And("there should be an article in the list created by Mollie with the title Test Titl" +
                    "e 18 and the content Test Content 18");
#line 1021
 testRunner.And("there should be an article in the list created by George with the title Test Titl" +
                    "e 19 and the content Test Content 19");
#line 1022
 testRunner.And("there should be an article in the list created by Matthew with the title Test Tit" +
                    "le 20 and the content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Latest News Management Articles Not a Full Take")]
        public virtual void GetLatestNewsManagementArticlesNotAFullTake()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Latest News Management Articles Not a Full Take", ((string[])(null)));
#line 1024
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table46.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table46.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table46.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table46.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table46.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table46.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table46.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
#line 1025
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table46);
#line 1034
 testRunner.When("I get the 10 most recent articles");
#line 1035
 testRunner.Then("the article list result should contain 7 items");
#line 1036
 testRunner.And("there should be an article in the list created by Jonathan with the title Test Ti" +
                    "tle 1 and the content Test Content 1");
#line 1037
 testRunner.And("there should be an article in the list created by Tobin with the title Test Title" +
                    " 2 and the content Test Content 2");
#line 1038
 testRunner.And("there should be an article in the list created by Carl with the title Test Title " +
                    "3 and the content Test Content 3");
#line 1039
 testRunner.And("there should be an article in the list created by Sara with the title Test Title " +
                    "4 and the content Test Content 4");
#line 1040
 testRunner.And("there should be an article in the list created by Dan with the title Test Title 5" +
                    " and the content Test Content 5");
#line 1041
 testRunner.And("there should be an article in the list created by Jon with the title Test Title 6" +
                    " and the content Test Content 6");
#line 1042
 testRunner.And("there should be an article in the list created by Emma with the title Test Title " +
                    "7 and the content Test Content 7");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Latest News Management Articles No Saved Items")]
        public virtual void GetLatestNewsManagementArticlesNoSavedItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Latest News Management Articles No Saved Items", ((string[])(null)));
#line 1044
this.ScenarioSetup(scenarioInfo);
#line 1045
 testRunner.Given("I have no saved news management articles");
#line 1046
 testRunner.When("I get the 10 most recent articles");
#line 1047
 testRunner.Then("the article list result should contain 0 items");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get Most Recent News Management Articles")]
        public virtual void GetMostRecentNewsManagementArticles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Most Recent News Management Articles", ((string[])(null)));
#line 1049
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table47.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table47.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table47.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table47.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table47.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table47.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table47.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table47.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table47.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table47.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
#line 1050
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table47);
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table48.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table48.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table48.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table48.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table48.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table48.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table48.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table48.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table48.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table48.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 1062
 testRunner.And("then I save more news management articles with the properties", ((string)(null)), table48);
#line 1074
 testRunner.When("I get the most recent articles using the time the second saved batch occurred");
#line 1075
 testRunner.Then("the most recent article list should contain 10 items");
#line 1076
 testRunner.And("there should be an article in the most recent list created by Laura with the titl" +
                    "e Test Title 11 and the content Test Content 11");
#line 1077
 testRunner.And("there should be an article in the most recent list created by Sarah with the titl" +
                    "e Test Title 12 and the content Test Content 12");
#line 1078
 testRunner.And("there should be an article in the most recent list created by Wayne with the titl" +
                    "e Test Title 13 and the content Test Content 13");
#line 1079
 testRunner.And("there should be an article in the most recent list created by Eric with the title" +
                    " Test Title 14 and the content Test Content 14");
#line 1080
 testRunner.And("there should be an article in the most recent list created by Gary with the title" +
                    " Test Title 15 and the content Test Content 15");
#line 1081
 testRunner.And("there should be an article in the most recent list created by Peter with the titl" +
                    "e Test Title 16 and the content Test Content 16");
#line 1082
 testRunner.And("there should be an article in the most recent list created by Julie with the titl" +
                    "e Test Title 17 and the content Test Content 17");
#line 1083
 testRunner.And("there should be an article in the most recent list created by Mollie with the tit" +
                    "le Test Title 18 and the content Test Content 18");
#line 1084
 testRunner.And("there should be an article in the most recent list created by George with the tit" +
                    "le Test Title 19 and the content Test Content 19");
#line 1085
 testRunner.And("there should be an article in the most recent list created by Matthew with the ti" +
                    "tle Test Title 20 and the content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
