// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ThreeBytes.ProjectHollywood.News.Management.Service.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NewsManagementNewsArticleService")]
    public partial class NewsManagementNewsArticleServiceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NewsManagementNewsArticleService.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NewsManagementNewsArticleService", "Data Access tests for NewsManagementNewsArticleService", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a Valid News Management Article")]
        public virtual void CreateAValidNewsManagementArticle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Valid News Management Article", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table1.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 5
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table1);
#line 8
 testRunner.When("I attempt to create the article");
#line 9
 testRunner.Then("the article service count should be 1");
#line 10
 testRunner.And("the service result will be true");
#line 11
 testRunner.And("the Creator will be Jonathan");
#line 12
 testRunner.And("the Title will be Test Title");
#line 13
 testRunner.And("the Content will be Test Content");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several News Management Articles")]
        public virtual void CreateSeveralNewsManagementArticles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several News Management Articles", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table2.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table2.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table2.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table2.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table2.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table2.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table2.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table2.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table2.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table2.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table2.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table2.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table2.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table2.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table2.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table2.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table2.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table2.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table2.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table2.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 16
 testRunner.Given("I have several news management articles with the properties", ((string)(null)), table2);
#line 38
 testRunner.When("I attempt to create the articles");
#line 39
 testRunner.Then("the service result will be true");
#line 40
 testRunner.And("the article service count should be 20");
#line 41
 testRunner.And("there should be an article created by Jonathan with the title Test Title 1 and th" +
                    "e content Test Content 1");
#line 42
 testRunner.And("there should be an article created by Tobin with the title Test Title 2 and the c" +
                    "ontent Test Content 2");
#line 43
 testRunner.And("there should be an article created by Carl with the title Test Title 3 and the co" +
                    "ntent Test Content 3");
#line 44
 testRunner.And("there should be an article created by Sara with the title Test Title 4 and the co" +
                    "ntent Test Content 4");
#line 45
 testRunner.And("there should be an article created by Dan with the title Test Title 5 and the con" +
                    "tent Test Content 5");
#line 46
 testRunner.And("there should be an article created by Jon with the title Test Title 6 and the con" +
                    "tent Test Content 6");
#line 47
 testRunner.And("there should be an article created by Emma with the title Test Title 7 and the co" +
                    "ntent Test Content 7");
#line 48
 testRunner.And("there should be an article created by Sorcha with the title Test Title 8 and the " +
                    "content Test Content 8");
#line 49
 testRunner.And("there should be an article created by Joel with the title Test Title 9 and the co" +
                    "ntent Test Content 9");
#line 50
 testRunner.And("there should be an article created by Dom with the title Test Title 10 and the co" +
                    "ntent Test Content 10");
#line 51
 testRunner.And("there should be an article created by Laura with the title Test Title 11 and the " +
                    "content Test Content 11");
#line 52
 testRunner.And("there should be an article created by Sarah with the title Test Title 12 and the " +
                    "content Test Content 12");
#line 53
 testRunner.And("there should be an article created by Wayne with the title Test Title 13 and the " +
                    "content Test Content 13");
#line 54
 testRunner.And("there should be an article created by Eric with the title Test Title 14 and the c" +
                    "ontent Test Content 14");
#line 55
 testRunner.And("there should be an article created by Gary with the title Test Title 15 and the c" +
                    "ontent Test Content 15");
#line 56
 testRunner.And("there should be an article created by Peter with the title Test Title 16 and the " +
                    "content Test Content 16");
#line 57
 testRunner.And("there should be an article created by Julie with the title Test Title 17 and the " +
                    "content Test Content 17");
#line 58
 testRunner.And("there should be an article created by Mollie with the title Test Title 18 and the" +
                    " content Test Content 18");
#line 59
 testRunner.And("there should be an article created by George with the title Test Title 19 and the" +
                    " content Test Content 19");
#line 60
 testRunner.And("there should be an article created by Matthew with the title Test Title 20 and th" +
                    "e content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News Management Article with a null CreatedBy Property")]
        public virtual void CreateANewsManagementArticleWithANullCreatedByProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News Management Article with a null CreatedBy Property", ((string[])(null)));
#line 62
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table3.AddRow(new string[] {
                        "null",
                        "Test Title",
                        "Test Content"});
#line 63
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table3);
#line 66
 testRunner.When("I attempt to create the article");
#line 67
 testRunner.Then("the article service count should be 0");
#line 68
 testRunner.And("the service result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several News Management Articles with some having a null CreatedBy Propert" +
            "y")]
        public virtual void CreateSeveralNewsManagementArticlesWithSomeHavingANullCreatedByProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several News Management Articles with some having a null CreatedBy Propert" +
                    "y", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table4.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table4.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table4.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table4.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table4.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table4.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table4.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table4.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table4.AddRow(new string[] {
                        "null",
                        "Test Title 9",
                        "Test Content 9"});
            table4.AddRow(new string[] {
                        "null",
                        "Test Title 10",
                        "Test Content 10"});
            table4.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table4.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table4.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table4.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table4.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table4.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table4.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table4.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table4.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table4.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 71
 testRunner.Given("I have several news management articles with the properties", ((string)(null)), table4);
#line 93
 testRunner.When("I attempt to create the articles");
#line 94
 testRunner.Then("the service result will be false");
#line 95
 testRunner.And("the article service count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News Management Article with a null Title Property")]
        public virtual void CreateANewsManagementArticleWithANullTitleProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News Management Article with a null Title Property", ((string[])(null)));
#line 97
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table5.AddRow(new string[] {
                        "Jonathan",
                        "null",
                        "Test Content"});
#line 98
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table5);
#line 101
 testRunner.When("I attempt to create the article");
#line 102
 testRunner.Then("the article service count should be 0");
#line 103
 testRunner.And("the service result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several News Management Articles some having a null Title Property")]
        public virtual void CreateSeveralNewsManagementArticlesSomeHavingANullTitleProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several News Management Articles some having a null Title Property", ((string[])(null)));
#line 105
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table6.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table6.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table6.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table6.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table6.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table6.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table6.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table6.AddRow(new string[] {
                        "Sorcha",
                        "null",
                        "Test Content 8"});
            table6.AddRow(new string[] {
                        "Joel",
                        "null",
                        "Test Content 9"});
            table6.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table6.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table6.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table6.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table6.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table6.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table6.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table6.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table6.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table6.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table6.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 106
 testRunner.Given("I have several news management articles with the properties", ((string)(null)), table6);
#line 128
 testRunner.When("I attempt to create the articles");
#line 129
 testRunner.Then("the service result will be false");
#line 130
 testRunner.And("the article service count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a News Management Article with a null Content Property")]
        public virtual void CreateANewsManagementArticleWithANullContentProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a News Management Article with a null Content Property", ((string[])(null)));
#line 132
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table7.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "null"});
#line 133
 testRunner.Given("I have a news management article with the properties", ((string)(null)), table7);
#line 136
 testRunner.When("I attempt to create the article");
#line 137
 testRunner.Then("the article service count should be 0");
#line 138
 testRunner.And("the service result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create several News Management Articles with some having a null Content Property")]
        public virtual void CreateSeveralNewsManagementArticlesWithSomeHavingANullContentProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create several News Management Articles with some having a null Content Property", ((string[])(null)));
#line 140
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table8.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table8.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table8.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table8.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table8.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table8.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table8.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table8.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table8.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "null"});
            table8.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "null"});
            table8.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table8.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table8.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table8.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table8.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table8.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table8.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table8.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table8.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table8.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 141
 testRunner.Given("I have several news management articles with the properties", ((string)(null)), table8);
#line 163
 testRunner.When("I attempt to create the articles");
#line 164
 testRunner.Then("the service result will be false");
#line 165
 testRunner.And("the article service count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a News Management Article")]
        public virtual void UpdateANewsManagementArticle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a News Management Article", ((string[])(null)));
#line 167
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table9.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 168
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table9);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table10.AddRow(new string[] {
                        "Tobin",
                        "New Title",
                        "New Content"});
#line 171
 testRunner.When("I update the news management article to the values below", ((string)(null)), table10);
#line 174
 testRunner.Then("the Creator will be Tobin");
#line 175
 testRunner.And("the Title will be New Title");
#line 176
 testRunner.And("the Content will be New Content");
#line 177
 testRunner.And("the service result will be true");
#line 178
 testRunner.And("the article service count should be 1");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update several News Management Articles")]
        public virtual void UpdateSeveralNewsManagementArticles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update several News Management Articles", ((string[])(null)));
#line 180
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table11.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table11.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table11.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table11.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table11.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table11.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table11.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table11.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table11.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table11.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table11.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table11.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table11.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table11.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table11.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table11.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table11.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table11.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table11.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table11.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 181
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table11);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table12.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 10",
                        "Test Content 10"});
            table12.AddRow(new string[] {
                        "Tobin",
                        "Test Title 20",
                        "Test Content 20"});
            table12.AddRow(new string[] {
                        "Carl",
                        "Test Title 30",
                        "Test Content 30"});
            table12.AddRow(new string[] {
                        "Sara",
                        "Test Title 40",
                        "Test Content 40"});
            table12.AddRow(new string[] {
                        "Dan",
                        "Test Title 50",
                        "Test Content 50"});
            table12.AddRow(new string[] {
                        "Jon",
                        "Test Title 60",
                        "Test Content 60"});
            table12.AddRow(new string[] {
                        "Emma",
                        "Test Title 70",
                        "Test Content 70"});
            table12.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 80",
                        "Test Content 80"});
            table12.AddRow(new string[] {
                        "Joel",
                        "Test Title 90",
                        "Test Content 90"});
            table12.AddRow(new string[] {
                        "Dom",
                        "Test Title 100",
                        "Test Content 100"});
            table12.AddRow(new string[] {
                        "Laura",
                        "Test Title 110",
                        "Test Content 110"});
            table12.AddRow(new string[] {
                        "Sarah",
                        "Test Title 120",
                        "Test Content 120"});
            table12.AddRow(new string[] {
                        "Wayne",
                        "Test Title 130",
                        "Test Content 130"});
            table12.AddRow(new string[] {
                        "Eric",
                        "Test Title 140",
                        "Test Content 140"});
            table12.AddRow(new string[] {
                        "Gary",
                        "Test Title 150",
                        "Test Content 150"});
            table12.AddRow(new string[] {
                        "Peter",
                        "Test Title 160",
                        "Test Content 160"});
            table12.AddRow(new string[] {
                        "Julie",
                        "Test Title 170",
                        "Test Content 170"});
            table12.AddRow(new string[] {
                        "Mollie",
                        "Test Title 180",
                        "Test Content 180"});
            table12.AddRow(new string[] {
                        "George",
                        "Test Title 190",
                        "Test Content 190"});
            table12.AddRow(new string[] {
                        "Matthew",
                        "Test Title 200",
                        "Test Content 200"});
#line 203
 testRunner.When("I update the news management articles to the values below using Created By as the" +
                    " identifier", ((string)(null)), table12);
#line 225
 testRunner.Then("the service result will be true");
#line 226
 testRunner.And("the article service count should be 20");
#line 227
 testRunner.And("there should be an article created by Jonathan with the title Test Title 10 and t" +
                    "he content Test Content 10");
#line 228
 testRunner.And("there should be an article created by Tobin with the title Test Title 20 and the " +
                    "content Test Content 20");
#line 229
 testRunner.And("there should be an article created by Carl with the title Test Title 30 and the c" +
                    "ontent Test Content 30");
#line 230
 testRunner.And("there should be an article created by Sara with the title Test Title 40 and the c" +
                    "ontent Test Content 40");
#line 231
 testRunner.And("there should be an article created by Dan with the title Test Title 50 and the co" +
                    "ntent Test Content 50");
#line 232
 testRunner.And("there should be an article created by Jon with the title Test Title 60 and the co" +
                    "ntent Test Content 60");
#line 233
 testRunner.And("there should be an article created by Emma with the title Test Title 70 and the c" +
                    "ontent Test Content 70");
#line 234
 testRunner.And("there should be an article created by Sorcha with the title Test Title 80 and the" +
                    " content Test Content 80");
#line 235
 testRunner.And("there should be an article created by Joel with the title Test Title 90 and the c" +
                    "ontent Test Content 90");
#line 236
 testRunner.And("there should be an article created by Dom with the title Test Title 100 and the c" +
                    "ontent Test Content 100");
#line 237
 testRunner.And("there should be an article created by Laura with the title Test Title 110 and the" +
                    " content Test Content 110");
#line 238
 testRunner.And("there should be an article created by Sarah with the title Test Title 120 and the" +
                    " content Test Content 120");
#line 239
 testRunner.And("there should be an article created by Wayne with the title Test Title 130 and the" +
                    " content Test Content 130");
#line 240
 testRunner.And("there should be an article created by Eric with the title Test Title 140 and the " +
                    "content Test Content 140");
#line 241
 testRunner.And("there should be an article created by Gary with the title Test Title 150 and the " +
                    "content Test Content 150");
#line 242
 testRunner.And("there should be an article created by Peter with the title Test Title 160 and the" +
                    " content Test Content 160");
#line 243
 testRunner.And("there should be an article created by Julie with the title Test Title 170 and the" +
                    " content Test Content 170");
#line 244
 testRunner.And("there should be an article created by Mollie with the title Test Title 180 and th" +
                    "e content Test Content 180");
#line 245
 testRunner.And("there should be an article created by George with the title Test Title 190 and th" +
                    "e content Test Content 190");
#line 246
 testRunner.And("there should be an article created by Matthew with the title Test Title 200 and t" +
                    "he content Test Content 200");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update a Invalid News Management Article")]
        public virtual void UpdateAInvalidNewsManagementArticle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update a Invalid News Management Article", ((string[])(null)));
#line 248
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table13.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 249
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table13);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table14.AddRow(new string[] {
                        "null",
                        "New Title",
                        "New Content"});
#line 252
 testRunner.When("I update the news management article to the values below", ((string)(null)), table14);
#line 255
 testRunner.Then("the Creator will be Jonathan");
#line 256
 testRunner.And("the Title will be Test Title");
#line 257
 testRunner.And("the Content will be Test Content");
#line 258
 testRunner.And("the service result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update several Invalid News Management Articles")]
        public virtual void UpdateSeveralInvalidNewsManagementArticles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update several Invalid News Management Articles", ((string[])(null)));
#line 260
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table15.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table15.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table15.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table15.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table15.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table15.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table15.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table15.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table15.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table15.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table15.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table15.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table15.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table15.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table15.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table15.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table15.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table15.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table15.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table15.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 261
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table15);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table16.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 10",
                        "Test Content 10"});
            table16.AddRow(new string[] {
                        "Tobin",
                        "Test Title 20",
                        "Test Content 20"});
            table16.AddRow(new string[] {
                        "Carl",
                        "Test Title 30",
                        "Test Content 30"});
            table16.AddRow(new string[] {
                        "Sara",
                        "Test Title 40",
                        "Test Content 40"});
            table16.AddRow(new string[] {
                        "Dan",
                        "Test Title 50",
                        "Test Content 50"});
            table16.AddRow(new string[] {
                        "Jon",
                        "Test Title 60",
                        "Test Content 60"});
            table16.AddRow(new string[] {
                        "Emma",
                        "Test Title 70",
                        "Test Content 70"});
            table16.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 80",
                        "Test Content 80"});
            table16.AddRow(new string[] {
                        "Joel",
                        "null",
                        "Test Content 90"});
            table16.AddRow(new string[] {
                        "Dom",
                        "null",
                        "Test Content 100"});
            table16.AddRow(new string[] {
                        "Laura",
                        "Test Title 110",
                        "Test Content 110"});
            table16.AddRow(new string[] {
                        "Sarah",
                        "Test Title 120",
                        "Test Content 120"});
            table16.AddRow(new string[] {
                        "Wayne",
                        "Test Title 130",
                        "Test Content 130"});
            table16.AddRow(new string[] {
                        "Eric",
                        "Test Title 140",
                        "Test Content 140"});
            table16.AddRow(new string[] {
                        "Gary",
                        "Test Title 150",
                        "Test Content 150"});
            table16.AddRow(new string[] {
                        "Peter",
                        "Test Title 160",
                        "Test Content 160"});
            table16.AddRow(new string[] {
                        "Julie",
                        "Test Title 170",
                        "Test Content 170"});
            table16.AddRow(new string[] {
                        "Mollie",
                        "Test Title 180",
                        "Test Content 180"});
            table16.AddRow(new string[] {
                        "George",
                        "Test Title 190",
                        "Test Content 190"});
            table16.AddRow(new string[] {
                        "Matthew",
                        "Test Title 200",
                        "Test Content 200"});
#line 283
 testRunner.When("I update the news management articles to the values below using Created By as the" +
                    " identifier", ((string)(null)), table16);
#line 305
 testRunner.Then("the service result will be false");
#line 306
 testRunner.And("the article service count should be 20");
#line 307
 testRunner.And("there should be an article created by Jonathan with the title Test Title 1 and th" +
                    "e content Test Content 1");
#line 308
 testRunner.And("there should be an article created by Tobin with the title Test Title 2 and the c" +
                    "ontent Test Content 2");
#line 309
 testRunner.And("there should be an article created by Carl with the title Test Title 3 and the co" +
                    "ntent Test Content 3");
#line 310
 testRunner.And("there should be an article created by Sara with the title Test Title 4 and the co" +
                    "ntent Test Content 4");
#line 311
 testRunner.And("there should be an article created by Dan with the title Test Title 5 and the con" +
                    "tent Test Content 5");
#line 312
 testRunner.And("there should be an article created by Jon with the title Test Title 6 and the con" +
                    "tent Test Content 6");
#line 313
 testRunner.And("there should be an article created by Emma with the title Test Title 7 and the co" +
                    "ntent Test Content 7");
#line 314
 testRunner.And("there should be an article created by Sorcha with the title Test Title 8 and the " +
                    "content Test Content 8");
#line 315
 testRunner.And("there should be an article created by Joel with the title Test Title 9 and the co" +
                    "ntent Test Content 9");
#line 316
 testRunner.And("there should be an article created by Dom with the title Test Title 10 and the co" +
                    "ntent Test Content 10");
#line 317
 testRunner.And("there should be an article created by Laura with the title Test Title 11 and the " +
                    "content Test Content 11");
#line 318
 testRunner.And("there should be an article created by Sarah with the title Test Title 12 and the " +
                    "content Test Content 12");
#line 319
 testRunner.And("there should be an article created by Wayne with the title Test Title 13 and the " +
                    "content Test Content 13");
#line 320
 testRunner.And("there should be an article created by Eric with the title Test Title 14 and the c" +
                    "ontent Test Content 14");
#line 321
 testRunner.And("there should be an article created by Gary with the title Test Title 15 and the c" +
                    "ontent Test Content 15");
#line 322
 testRunner.And("there should be an article created by Peter with the title Test Title 16 and the " +
                    "content Test Content 16");
#line 323
 testRunner.And("there should be an article created by Julie with the title Test Title 17 and the " +
                    "content Test Content 17");
#line 324
 testRunner.And("there should be an article created by Mollie with the title Test Title 18 and the" +
                    " content Test Content 18");
#line 325
 testRunner.And("there should be an article created by George with the title Test Title 19 and the" +
                    " content Test Content 19");
#line 326
 testRunner.And("there should be an article created by Matthew with the title Test Title 20 and th" +
                    "e content Test Content 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a null News Management Article")]
        public virtual void DeleteANullNewsManagementArticle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a null News Management Article", ((string[])(null)));
#line 328
this.ScenarioSetup(scenarioInfo);
#line 329
 testRunner.Given("I have a null news management article");
#line 330
 testRunner.When("I attempt to delete the article");
#line 331
 testRunner.Then("the article service count should be 0");
#line 332
 testRunner.And("the service result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete several null News Management Articles in a transaction")]
        public virtual void DeleteSeveralNullNewsManagementArticlesInATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete several null News Management Articles in a transaction", ((string[])(null)));
#line 334
this.ScenarioSetup(scenarioInfo);
#line 335
 testRunner.Given("I have several null news management articles");
#line 336
 testRunner.When("I attempt to delete the articles");
#line 337
 testRunner.Then("the article service count should be 0");
#line 338
 testRunner.And("the service result will be false");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a News Management Article")]
        public virtual void DeleteANewsManagementArticle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete a News Management Article", ((string[])(null)));
#line 340
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table17.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 341
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table17);
#line 344
 testRunner.When("I attempt to delete the article");
#line 345
 testRunner.Then("the article service count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete several News Management Articles")]
        public virtual void DeleteSeveralNewsManagementArticles()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete several News Management Articles", ((string[])(null)));
#line 347
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table18.AddRow(new string[] {
                        "Jonathan",
                        "Test Title 1",
                        "Test Content 1"});
            table18.AddRow(new string[] {
                        "Tobin",
                        "Test Title 2",
                        "Test Content 2"});
            table18.AddRow(new string[] {
                        "Carl",
                        "Test Title 3",
                        "Test Content 3"});
            table18.AddRow(new string[] {
                        "Sara",
                        "Test Title 4",
                        "Test Content 4"});
            table18.AddRow(new string[] {
                        "Dan",
                        "Test Title 5",
                        "Test Content 5"});
            table18.AddRow(new string[] {
                        "Jon",
                        "Test Title 6",
                        "Test Content 6"});
            table18.AddRow(new string[] {
                        "Emma",
                        "Test Title 7",
                        "Test Content 7"});
            table18.AddRow(new string[] {
                        "Sorcha",
                        "Test Title 8",
                        "Test Content 8"});
            table18.AddRow(new string[] {
                        "Joel",
                        "Test Title 9",
                        "Test Content 9"});
            table18.AddRow(new string[] {
                        "Dom",
                        "Test Title 10",
                        "Test Content 10"});
            table18.AddRow(new string[] {
                        "Laura",
                        "Test Title 11",
                        "Test Content 11"});
            table18.AddRow(new string[] {
                        "Sarah",
                        "Test Title 12",
                        "Test Content 12"});
            table18.AddRow(new string[] {
                        "Wayne",
                        "Test Title 13",
                        "Test Content 13"});
            table18.AddRow(new string[] {
                        "Eric",
                        "Test Title 14",
                        "Test Content 14"});
            table18.AddRow(new string[] {
                        "Gary",
                        "Test Title 15",
                        "Test Content 15"});
            table18.AddRow(new string[] {
                        "Peter",
                        "Test Title 16",
                        "Test Content 16"});
            table18.AddRow(new string[] {
                        "Julie",
                        "Test Title 17",
                        "Test Content 17"});
            table18.AddRow(new string[] {
                        "Mollie",
                        "Test Title 18",
                        "Test Content 18"});
            table18.AddRow(new string[] {
                        "George",
                        "Test Title 19",
                        "Test Content 19"});
            table18.AddRow(new string[] {
                        "Matthew",
                        "Test Title 20",
                        "Test Content 20"});
#line 348
 testRunner.Given("I have several saved news management articles with the properties", ((string)(null)), table18);
#line 370
 testRunner.When("I attempt to delete the articles");
#line 371
 testRunner.Then("the service result will be true");
#line 372
 testRunner.And("the article service count should be 0");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid Query Is News Article Created By")]
        public virtual void ValidQueryIsNewsArticleCreatedBy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid Query Is News Article Created By", ((string[])(null)));
#line 374
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table19.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 375
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table19);
#line 378
 testRunner.When("I query whether the news article was created by Jonathan");
#line 379
 testRunner.Then("the service result will be true");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid Query Is News Article Created By")]
        public virtual void InvalidQueryIsNewsArticleCreatedBy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid Query Is News Article Created By", ((string[])(null)));
#line 381
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "CreatedBy",
                        "Title",
                        "Content"});
            table20.AddRow(new string[] {
                        "Jonathan",
                        "Test Title",
                        "Test Content"});
#line 382
 testRunner.Given("I have a saved news management article with the properties", ((string)(null)), table20);
#line 385
 testRunner.When("I query whether the news article was created by Tobin");
#line 386
 testRunner.Then("the service result will be false");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
