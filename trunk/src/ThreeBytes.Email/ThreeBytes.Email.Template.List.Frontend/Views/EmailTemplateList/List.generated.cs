#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ThreeBytes.Email.Template.List.Frontend.Views.EmailTemplateList
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Script.Serialization;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using ThreeBytes.Core.Extensions.Mvc;
    using ThreeBytes.Email.Template.List.Resources;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "1.2.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/EmailTemplateList/List.cshtml")]
    public class List : System.Web.Mvc.WebViewPage<ThreeBytes.Email.Template.List.Frontend.Models.PagedEmailTemplateEmailViewModel>
    {
        public List()
        {
        }
        public override void Execute()
        {


            
            #line 2 "..\..\Views\EmailTemplateList\List.cshtml"
  
    ViewBag.Title = Resources.BrowserTitle;


            
            #line default
            #line hidden
WriteLiteral(@"
<div id=""latest-templates-container"">
    <div data-bind=""latestItems: latestViewModel""></div>
</div>
<div id=""paged-templates-container"">
    <div data-bind=""pagedGrid: pagedViewModel, pagedGridTemplate: 'paged-templates-table-tmpl'""></div>
</div>

<script type=""text/x-jquery-tmpl"" id=""paged-templates-table-tmpl"">
    <div class=""overall-table-count"">
        <em>");


            
            #line 15 "..\..\Views\EmailTemplateList\List.cshtml"
       Write(Resources.There);

            
            #line default
            #line hidden
WriteLiteral(@"&nbsp;<span data-bind=""text: is_are""></span>&nbsp;<span data-bind=""text: totalItemCount""></span>&nbsp;<span data-bind=""text: plural""></span></em>
    </div>
    <table id=""paged-templates-table"" class=""table table-striped table-bordered table-condensed"" data-bind=""visible: items().length > 0"">
        <thead>
            <tr>
                <th>
                    ");


            
            #line 21 "..\..\Views\EmailTemplateList\List.cshtml"
               Write(Resources.Name);

            
            #line default
            #line hidden
WriteLiteral("\r\n                </th>\r\n                <th>\r\n                    ");


            
            #line 24 "..\..\Views\EmailTemplateList\List.cshtml"
               Write(Resources.Subject);

            
            #line default
            #line hidden
WriteLiteral("\r\n                </th>\r\n                <th>\r\n                    ");


            
            #line 27 "..\..\Views\EmailTemplateList\List.cshtml"
               Write(Resources.Html);

            
            #line default
            #line hidden
WriteLiteral("\r\n                </th>\r\n                <th>\r\n                    ");


            
            #line 30 "..\..\Views\EmailTemplateList\List.cshtml"
               Write(Resources.Encoding);

            
            #line default
            #line hidden
WriteLiteral(@"
                </th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody id=""paged-templates-tbody"" data-bind=""foreach: items"">
            <tr>        
                <td data-bind=""text: Name""></td>
                <td data-bind=""text: Subject""></td>
                <td data-bind=""text: IsHtml""></td>
                <td data-bind=""text: Encoding""></td>
                <td>
                    <div class=""btn-group open"">
                      <button class=""btn btn-primary dropdown-toggle"" data-toggle=""dropdown"">Select <span class=""caret""></span></button>
                      <ul class=""dropdown-menu"">
                        <li><a href=""#"" data-bind=""click: function(event) { $parent.additionalFunctions.raiseEdit($data); }"">");


            
            #line 46 "..\..\Views\EmailTemplateList\List.cshtml"
                                                                                                                        Write(Resources.Edit);

            
            #line default
            #line hidden
WriteLiteral("</a></li>\r\n                        <li><a href=\"#\" data-bind=\"click: function(eve" +
"nt) { $parent.additionalFunctions.raiseDetails($data); }\">");


            
            #line 47 "..\..\Views\EmailTemplateList\List.cshtml"
                                                                                                                           Write(Resources.Details);

            
            #line default
            #line hidden
WriteLiteral("</a></li>\r\n                        <li><a href=\"#\" data-bind=\"click: function(eve" +
"nt) { $parent.additionalFunctions.raiseDelete($data); }\">");


            
            #line 48 "..\..\Views\EmailTemplateList\List.cshtml"
                                                                                                                          Write(Resources.Delete);

            
            #line default
            #line hidden
WriteLiteral("</a></li>\r\n                      </ul>\r\n                    </div>\r\n             " +
"   </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</script>\r\n\r\n");


            
            #line 57 "..\..\Views\EmailTemplateList\List.cshtml"
   
  using (Html.BeginScriptContext())
  {
    Html.AddScriptBlock(@"
        var email_template_latest_list  = {};
    
        (function (index) {
            
            var itemMapping = {
			    'CreationDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm'),
                'LastModifiedDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm')
		    };

            var itemViewModel = function(data) {
			    ko.mapping.fromJS(data, itemMapping, this);
		    };

            var mapping = {	
			    'Items': {
				    create: function(options) {
					    return new itemViewModel(options.data);
				    }
			    }
		    };

            email_template_latest_list = index = ko.mapping.fromJS(" + @Html.Raw(new JavaScriptSerializer().Serialize(Model.MostRecentResult)) + @", mapping);

            index.latestViewModel = new ko.latestItems.viewModel({
                controller: 'Template/List',
                action: 'GetNewerThan',
                data: index,
                singular: '" + @Resources.Template + @"',
                plural: '" + @Resources.Templates + @"',
                loadPageCallback: function(data) {
                    ko.mapping.fromJS(data, index);
                },
                divIdentifier: 'latest-templates-container',
                pagingComponentIdentifier: 'paged-templates',
                columns: [
                    { headerText: 'Name', rowText: 'Name' },
                    { headerText: 'Subject', rowText: 'Subject' },
                    { headerText: 'Creation', rowText: 'CreationDateTime' }
                ]
            });

            jQuery(function() {
                ko.applyBindings(index, jQuery('#latest-templates-container')[0]);
            });
        
            

        } (email_template_latest_list));
    
        var email_template_paged_list  = {};

        (function (index) {
            
            var itemMapping = {
			    'CreationDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm'),
                'LastModifiedDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm')
		    };

            var itemViewModel = function(data) {
			    ko.mapping.fromJS(data, itemMapping, this);
		    };

            var mapping = {	
			    'Items': {
				    create: function(options) {
					    return new itemViewModel(options.data);
				    }
			    }
		    };

            email_template_paged_list = index = ko.mapping.fromJS(" + @Html.Raw(new JavaScriptSerializer().Serialize(Model.PagedResult)) + @", mapping);
        
            index.pagedViewModel = new ko.pagedGrid.viewModel({
                controller: 'Template',
                action: 'GetPage',
                data: index,
                singular: '" + @Resources.Template + @"',
                plural: '" + @Resources.Templates + @"',
                pagingComponentIdentifier: 'paged-templates',
                loadPageCallback: function(data) {
                    ko.mapping.fromJS(data, index);
                },
                columns: [
                    { headerText: 'Name', rowText: 'Name' },
                    { headerText: 'Application Name', rowText: 'ApplicationName' },
                    { headerText: 'Creation Date Time', rowText: 'CreationDateTime' },
                    { headerText: 'Last Modified Date Time', rowText: 'LastModifiedDateTime' }
                ],
                additionalFunctions: {
                    raiseEdit: function (obj) {
                        jQuery(document).trigger('emailTemplateEdit', [obj.Id()]);
                    },
                    raiseDetails: function (obj) {
                        jQuery(document).trigger('emailTemplateDetails', [obj]);
                    },
                    raiseDelete: function (obj) {
                        jQuery(document).trigger('emailTemplateDelete', [obj.Id()]);
                    }
                }
            });

            jQuery(function() {
                ko.applyBindings(index, jQuery('#paged-templates-container')[0]);
            });

            jQuery(document).bind('emailTemplateUpdated', function (event, id) {
                setTimeout(function() {
                    jQuery.getJSON('/EmailTemplateList/Get', { 'id': id }, function(data) {
                        var replacement = ko.mapping.fromJS(data);
                    
                        jQuery.each(index.Items(), function(i, item) {
                            if (item.Id() == id) {
                                index.Items.splice(i, 1, replacement);
                                return false;
                            }
                        });
                    });
                }, 200);
            });
        
            jQuery(document).bind('emailTemplateDeleted', function (event, id) {
                jQuery.each(index.Items(), function(i, item) {
                    if (item.Id() == id) {
                        index.Items.splice(i, 1);
                        return false;
                    }
                });
            
                if (index.Items().length < 10) {
                    jQuery.getJSON('/EmailTemplateList/List', { 'page': index.PageNumber(), 'datetime': GetDotNetDate(index.OriginalRequestDateTime()) }, function(data) {
                        ko.mapping.fromJS(data, index);
                    });
                }
            });

        } (email_template_paged_list));");
  }

            
            #line default
            #line hidden

        }
    }
}
#pragma warning restore 1591
