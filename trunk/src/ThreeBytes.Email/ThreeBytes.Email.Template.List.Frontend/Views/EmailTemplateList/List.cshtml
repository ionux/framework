@model ThreeBytes.Email.Template.List.Frontend.Models.PagedEmailTemplateEmailViewModel
@{
    ViewBag.Title = Resources.BrowserTitle;
}

<div id="latest-templates-container">
    <div data-bind="latestItems: latestViewModel"></div>
</div>
<div id="paged-templates-container">
    <div data-bind="pagedGrid: pagedViewModel, pagedGridTemplate: 'paged-templates-table-tmpl'"></div>
</div>

<script type="text/x-jquery-tmpl" id="paged-templates-table-tmpl">
<div class="widget widget-table">
    <div class="widget-header">
        <i class="icon-envelope"></i>
        <h3>Email Templates</h3>
        <div class="pull-right-menu">
            <em>@Resources.There&nbsp;<span data-bind="text: is_are"></span>&nbsp;<span data-bind="text: totalItemCount"></span>&nbsp;<span data-bind="text: plural"></span></em>
            <button class="btn btn-primary" data-bind="click: additionalFunctions.raiseCreate">Create</button>
        </div>
    </div>
    <div class="widget-content">
        <table id="paged-templates-table" class="table table-striped table-bordered table-condensed" data-bind="visible: items().length > 0">
            <thead>
                <tr>
                    <th>
                        @Resources.Name
                    </th>
                    <th>
                        @Resources.Subject
                    </th>
                    <th>
                        @Resources.Html
                    </th>
                    <th>
                        @Resources.Encoding
                    </th>
                    <th>
                    </th>
                </tr>
            </thead>
            <tbody id="paged-templates-tbody" data-bind="foreach: items">
                <tr>        
                    <td data-bind="text: Name"></td>
                    <td data-bind="text: Subject"></td>
                    <td data-bind="text: IsHtml"></td>
                    <td data-bind="text: Encoding"></td>
                    <td>
                        <div class="btn-group open">
                          <button class="btn btn-primary dropdown-toggle" data-toggle="dropdown">Select <span class="caret"></span></button>
                          <ul class="dropdown-menu">
                            <li><a href="#" data-bind="click: function(event) { $parent.additionalFunctions.raiseEdit($data); }">@Resources.Edit</a></li>
                            <li><a href="#" data-bind="click: function(event) { $parent.additionalFunctions.raiseDetails($data); }">@Resources.Details</a></li>
                            <li><a href="#" data-bind="click: function(event) { $parent.additionalFunctions.raiseDelete($data); }">@Resources.Delete</a></li>
                          </ul>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
</script>

@{ 
  using (Html.BeginScriptContext())
  {
    Html.AddScriptBlock(@"
        var email_template_latest_list  = {};
    
        (function (index) {
            
            var itemMapping = {
			    'CreationDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm'),
                'LastModifiedDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm')
		    };

            var itemViewModel = function(data) {
			    ko.mapping.fromJS(data, itemMapping, this);
		    };

            var mapping = {	
			    'Items': {
				    create: function(options) {
					    return new itemViewModel(options.data);
				    }
			    }
		    };

            email_template_latest_list = index = ko.mapping.fromJS(" + @Html.Raw(new JavaScriptSerializer().Serialize(Model.MostRecentResult)) + @", mapping);

            index.latestViewModel = new ko.latestItems.viewModel({
                controller: 'Template/List',
                action: 'GetNewerThan',
                data: index,
                singular: '" + @Resources.Template + @"',
                plural: '" + @Resources.Templates + @"',
                loadPageCallback: function(data) {
                    ko.mapping.fromJS(data, index);
                },
                divIdentifier: 'latest-templates-container',
                pagingComponentIdentifier: 'paged-templates',
                columns: [
                    { headerText: 'Name', rowText: 'Name' },
                    { headerText: 'Subject', rowText: 'Subject' },
                    { headerText: 'Creation', rowText: 'CreationDateTime' }
                ]
            });

            jQuery(function() {
                ko.applyBindings(index, jQuery('#latest-templates-container')[0]);
            });
        
            

        } (email_template_latest_list));
    
        var email_template_paged_list  = {};

        (function (index) {
            
            var itemMapping = {
			    'CreationDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm'),
                'LastModifiedDateTime': ko.utils.getDateFromJson('dd/MMM HH:mm')
		    };

            var itemViewModel = function(data) {
			    ko.mapping.fromJS(data, itemMapping, this);
		    };

            var mapping = {	
			    'Items': {
				    create: function(options) {
					    return new itemViewModel(options.data);
				    }
			    }
		    };

            email_template_paged_list = index = ko.mapping.fromJS(" + @Html.Raw(new JavaScriptSerializer().Serialize(Model.PagedResult)) + @", mapping);
        
            index.pagedViewModel = new ko.pagedGrid.viewModel({
                controller: 'Template',
                action: 'GetPage',
                data: index,
                singular: '" + @Resources.Template + @"',
                plural: '" + @Resources.Templates + @"',
                pagingComponentIdentifier: 'paged-templates',
                loadPageCallback: function(data) {
                    ko.mapping.fromJS(data, index);
                },
                columns: [
                    { headerText: 'Name', rowText: 'Name' },
                    { headerText: 'Application Name', rowText: 'ApplicationName' },
                    { headerText: 'Creation Date Time', rowText: 'CreationDateTime' },
                    { headerText: 'Last Modified Date Time', rowText: 'LastModifiedDateTime' }
                ],
                additionalFunctions: {
                    raiseEdit: function (obj) {
                        jQuery(document).trigger('emailTemplateEdit', [obj.Id()]);
                    },
                    raiseDetails: function (obj) {
                        jQuery(document).trigger('emailTemplateDetails', [obj]);
                    },
                    raiseDelete: function (obj) {
                        jQuery(document).trigger('emailTemplateDelete', [obj.Id()]);
                    },
                    raiseCreate: function () {
                        jQuery(document).trigger('emailTemplateCreate');
                    }
                }
            });

            jQuery(function() {
                ko.applyBindings(index, jQuery('#paged-templates-container')[0]);
            });

            jQuery(document).bind('emailTemplateUpdated', function (event, id) {
                setTimeout(function() {
                    jQuery.getJSON('/EmailTemplateList/Get', { 'id': id }, function(data) {
                        var replacement = ko.mapping.fromJS(data);
                    
                        jQuery.each(index.Items(), function(i, item) {
                            if (item.Id() == id) {
                                index.Items.splice(i, 1, replacement);
                                return false;
                            }
                        });
                    });
                }, 200);
            });
        
            jQuery(document).bind('emailTemplateDeleted', function (event, id) {
                jQuery.each(index.Items(), function(i, item) {
                    if (item.Id() == id) {
                        index.Items.splice(i, 1);
                        return false;
                    }
                });
            
                if (index.Items().length < 10) {
                    jQuery.getJSON('/EmailTemplateList/List', { 'page': index.PageNumber(), 'datetime': GetDotNetDate(index.OriginalRequestDateTime()) }, function(data) {
                        ko.mapping.fromJS(data, index);
                    });
                }
            });

        } (email_template_paged_list));");
  }
}